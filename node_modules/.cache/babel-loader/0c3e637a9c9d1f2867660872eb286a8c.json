{"ast":null,"code":"var _jsxFileName = \"/Users/thieunguyen/Desktop/Project/ReactJS/web-ets-2020/src/containers/Part7/index.tsx\";\nimport Screen from '../Screen';\nimport React, { useState, useEffect } from 'react';\nimport { FlatList } from 'react-native';\nimport styled from 'styled-components/native';\nimport { useParams } from 'react-router-dom';\nimport textAPI from \"../../api/textAPI\";\nimport CryptoJS from 'crypto-js';\nimport Part7Item from './shared/Part7Item';\nimport Footer from 'components/Footer';\nimport { getPart } from 'store/selectors/selectors';\nimport { updatePartAction } from 'store/actionTypes/actionType';\nimport { useDispatch, useSelector } from 'react-redux';\nconst TestFlatList = styled(FlatList)`\n  width: 100%;\n  height: 100%;\n`;\n\nconst Part7 = () => {\n  const [testList, setTestList] = useState([]);\n  const [correctNumber, setCorrectNumber] = useState(-1);\n  const [totalNumber, setTotalNumber] = useState(-1);\n  const dispatch = useDispatch();\n  const {\n    testNumber\n  } = useParams();\n  const testName = `test${testNumber}`;\n  const part7 = useSelector(getPart(testName, 'part7'));\n  useEffect(() => {\n    getData(testNumber, part7);\n  }, []);\n\n  const getData = async (testNumber, part7) => {\n    const itemTypes = part7 && part7.questions && part7.questions.length > 0 ? part7.questions : [];\n\n    if (itemTypes.length > 0) {\n      setTestList(itemTypes);\n    } else {\n      const data = await textAPI.get(testNumber, 7);\n      const plainData = CryptoJS.AES.decrypt(data, 'thieumao').toString(CryptoJS.enc.Utf8);\n      const json = JSON.parse(plainData);\n      setTestList(json);\n      updateDatabase(testName, json);\n    }\n  };\n\n  const updateDatabase = async (testName, part7Questions) => {\n    const part7Detail = {\n      name: 'Part 7',\n      questions: part7Questions\n    };\n    dispatch(updatePartAction(testName, 'part7', part7Detail));\n  };\n\n  const onReset = () => {\n    let arr = testList || [];\n\n    for (let test of arr) {\n      test.isShownTranslate = false;\n      const questions = test.questions ? test.questions : [];\n\n      for (const question of questions) {\n        const item = question;\n\n        if (item) {\n          item.submitted = false;\n          item.selected = false;\n        }\n      }\n    }\n\n    updateDatabase(testName, arr);\n    setCorrectNumber(-1);\n  };\n\n  const onSubmit = () => {\n    calculateScore();\n    let arr = testList || [];\n\n    for (let test of arr) {\n      const questions = test.questions ? test.questions : [];\n\n      for (const question of questions) {\n        const item = question;\n\n        if (item && item.selected) {\n          test.isShownTranslate = true;\n          item.submitted = true;\n        }\n      }\n    }\n\n    updateDatabase(testName, arr);\n  };\n\n  const calculateScore = () => {\n    let wrongCount = 0;\n    let correctCount = 0;\n    let count = 0;\n\n    for (const test of testList) {\n      const questions = test.questions ? test.questions : [];\n      let allNone = true;\n      let allCorrect = true;\n\n      for (const question of questions) {\n        count += 1;\n        const item = question;\n\n        if (item && item.selected) {\n          if (item.selected == item.correct) {\n            correctCount += 1;\n            allNone = false;\n          } else {\n            wrongCount += 1;\n            allCorrect = false;\n            allNone = false;\n          }\n        } else {\n          allCorrect = false;\n        }\n      }\n    }\n\n    setCorrectNumber(correctCount);\n    setTotalNumber(count);\n  };\n\n  const onSelectAnswer = (detailItem, questionPosition, selected, part7Index) => {\n    let arr = testList || [];\n\n    if (arr[part7Index].questions[questionPosition].selected != selected) {\n      arr[part7Index].questions[questionPosition].selected = selected;\n    } else {\n      arr[part7Index].questions[questionPosition].selected = undefined;\n    }\n\n    updateDatabase(testName, arr);\n  };\n\n  const renderItem = ({\n    index\n  }) => {\n    const item = testList[index];\n    return /*#__PURE__*/React.createElement(Part7Item, {\n      data: item,\n      part7Index: index,\n      visibleIndex: 1,\n      onSelectAnswer: onSelectAnswer,\n      onCollapse: () => null,\n      onCollapseTranslation: () => null,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 7\n      }\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(Screen, {\n    canBack: true,\n    title: `Test ${testNumber} - Part 7`,\n    showMenu: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(TestFlatList, {\n    data: testList,\n    renderItem: renderItem,\n    keyExtractor: (item, index) => `${index}_${item}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Footer, {\n    correctNumber: correctNumber,\n    totalNumber: totalNumber,\n    onReset: onReset,\n    onSubmit: onSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 9\n    }\n  }));\n};\n\nexport default Part7;","map":{"version":3,"sources":["/Users/thieunguyen/Desktop/Project/ReactJS/web-ets-2020/src/containers/Part7/index.tsx"],"names":["Screen","React","useState","useEffect","FlatList","styled","useParams","textAPI","CryptoJS","Part7Item","Footer","getPart","updatePartAction","useDispatch","useSelector","TestFlatList","Part7","testList","setTestList","correctNumber","setCorrectNumber","totalNumber","setTotalNumber","dispatch","testNumber","testName","part7","getData","itemTypes","questions","length","data","get","plainData","AES","decrypt","toString","enc","Utf8","json","JSON","parse","updateDatabase","part7Questions","part7Detail","name","onReset","arr","test","isShownTranslate","question","item","submitted","selected","onSubmit","calculateScore","wrongCount","correctCount","count","allNone","allCorrect","correct","onSelectAnswer","detailItem","questionPosition","part7Index","undefined","renderItem","index"],"mappings":"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","sourcesContent":["import Screen from '../Screen';\nimport React, { FC, useState, useEffect } from 'react';\nimport { FlatList } from 'react-native';\nimport styled from 'styled-components/native';\nimport { useParams } from 'react-router-dom';\nimport textAPI from \"../../api/textAPI\";\nimport CryptoJS from 'crypto-js';\nimport Part7Item from './shared/Part7Item';\nimport Footer from 'components/Footer';\nimport { getPart } from 'store/selectors/selectors';\nimport { updatePartAction } from 'store/actionTypes/actionType';\nimport { useDispatch, useSelector } from 'react-redux';\n\nconst TestFlatList = styled(FlatList as new () => FlatList<string>)`\n  width: 100%;\n  height: 100%;\n`;\n\nconst Part7: FC = () => {\n  const [testList, setTestList] = useState<any[]>([]);\n  const [correctNumber, setCorrectNumber] = useState<number>(-1);\n  const [totalNumber, setTotalNumber] = useState<number>(-1);\n\n  const dispatch = useDispatch();\n  const { testNumber } = useParams();\n  const testName = `test${testNumber}`;\n  const part7  = useSelector(getPart(testName, 'part7'));\n  useEffect(() => {\n    getData(testNumber, part7);\n  }, []);\n\n  const getData = async (testNumber: number, part7: any) => {\n    const itemTypes: any[] = (part7 && part7.questions && part7.questions.length > 0) ? part7.questions : [];\n    if (itemTypes.length > 0) {\n      setTestList(itemTypes);\n    } else {\n      const data = await textAPI.get(testNumber, 7);\n      const plainData = CryptoJS.AES.decrypt(data, 'thieumao').toString(CryptoJS.enc.Utf8);\n      const json = JSON.parse(plainData);\n      setTestList(json);\n      updateDatabase(testName, json);\n    }\n  };\n\n  const updateDatabase = async (testName: string, part7Questions: any[]) => {\n    const part7Detail = {\n      name: 'Part 7',\n      questions: part7Questions,\n    };\n    dispatch(updatePartAction(testName, 'part7', part7Detail));\n  };\n\n  const onReset = () => {\n    let arr = testList || [];\n    for (let test of arr) {\n      test.isShownTranslate = false;\n      const questions = (test.questions) ? test.questions : [];\n      for (const question of questions) {\n        const item = question;\n        if (item) {\n          item.submitted = false;\n          item.selected = false;\n        }\n      }\n    }\n    updateDatabase(testName, arr);\n\n    setCorrectNumber(-1);\n  };\n\n  const onSubmit = () => {\n    calculateScore();\n    let arr = testList || [];\n    for (let test of arr) {\n      const questions = (test.questions) ? test.questions : [];\n      for (const question of questions) {\n        const item = question;\n        if (item && item.selected) {\n          test.isShownTranslate = true;\n          item.submitted = true;\n        }\n      }\n    }\n    updateDatabase(testName, arr);\n  };\n\n  const calculateScore = () => {\n    let wrongCount = 0;\n    let correctCount = 0;\n    let count = 0;\n    for (const test of testList) {\n      const questions = (test.questions) ? test.questions : []; \n      let allNone = true;\n      let allCorrect = true;\n      for (const question of questions) {\n        count += 1;\n        const item = question;\n        if (item && item.selected) {\n          if (item.selected == item.correct) {\n            correctCount += 1;\n            allNone = false;\n          } else {\n            wrongCount += 1;\n            allCorrect = false;\n            allNone = false;\n          }\n        } else {\n          allCorrect = false;\n        }\n      }\n    }\n    setCorrectNumber(correctCount);\n    setTotalNumber(count);\n  };\n\n  const onSelectAnswer = (detailItem: any, questionPosition: number, selected: string, part7Index: number) => {\n    let arr = testList || [];\n    if (arr[part7Index].questions[questionPosition].selected != selected) {\n      arr[part7Index].questions[questionPosition].selected = selected;\n    } else {\n      arr[part7Index].questions[questionPosition].selected = undefined;\n    }\n    updateDatabase(testName, arr);\n  };\n\n  const renderItem = ({ index }: { item: any; index: number }) => {\n    const item = testList[index];\n    return (\n      <Part7Item\n        data={item}\n        part7Index={index}\n        visibleIndex={1}\n        onSelectAnswer={onSelectAnswer}\n        onCollapse={() => null}\n        onCollapseTranslation={() => null}\n      />\n    );\n  };\n\n  return (\n      <Screen canBack title={`Test ${testNumber} - Part 7`} showMenu={false}>\n        <TestFlatList\n          data={testList}\n          renderItem={renderItem}\n          keyExtractor={(item, index) => `${index}_${item}`}\n        />\n        <Footer correctNumber={correctNumber} totalNumber={totalNumber} onReset={onReset} onSubmit={onSubmit} />\n      </Screen>\n  );\n};\n\nexport default Part7;\n"]},"metadata":{},"sourceType":"module"}