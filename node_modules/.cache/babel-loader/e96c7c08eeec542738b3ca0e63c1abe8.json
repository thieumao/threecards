{"ast":null,"code":"import _taggedTemplateLiteral from\"/Users/thieunguyen/Desktop/Project/ReactJS/web-ets-2020/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";function _templateObject3(){var data=_taggedTemplateLiteral([\"\\n  font-size: 18px;\\n  color: \",\";\\n  background-color: \",\"};\\n  padding: 8px;\\n\"]);_templateObject3=function _templateObject3(){return data;};return data;}function _templateObject2(){var data=_taggedTemplateLiteral([\"\\n  width: 100%;\\n  background-color: \",\";\\n  padding-vertical: 4px;\\n\"]);_templateObject2=function _templateObject2(){return data;};return data;}function _templateObject(){var data=_taggedTemplateLiteral([\"\\n  font-size: 18px;\\n  padding: 8px;\\n\"]);_templateObject=function _templateObject(){return data;};return data;}import React,{memo}from'react';import{TouchableOpacity}from'react-native';import styled from'styled-components/native';import Fonts from'../../../theme/fonts';import Colors from'../../../theme/colors';import{Answer}from'../../../constants/AppConstants';import Divider from'../../../components/Divider';var Text=styled(Fonts.Normal)(_templateObject());var ItemContainer=styled.View(_templateObject2(),Colors.SECOND_COLOR);var ButtonText=styled(Fonts.Normal)(_templateObject3(),function(props){return props.isSelected?'green':'black';},function(props){return props.isShown?'yellow':Colors.SECOND_COLOR;});var QuestionItem=function QuestionItem(_ref){var item=_ref.item,index=_ref.index,onClickA=_ref.onClickA,onClickB=_ref.onClickB,onClickC=_ref.onClickC,onClickD=_ref.onClickD;return/*#__PURE__*/React.createElement(ItemContainer,null,/*#__PURE__*/React.createElement(Text,null,\"\".concat(index+1,\"/ \").concat(item.question||'')),/*#__PURE__*/React.createElement(Divider,null),/*#__PURE__*/React.createElement(TouchableOpacity,{onPress:function onPress(){return onClickA(item,index,Answer.A);}},/*#__PURE__*/React.createElement(ButtonText,{isSelected:Answer.A==item.selected,isShown:item.submitted&&Answer.A==item.correct},\"A. \".concat(item.a))),/*#__PURE__*/React.createElement(Divider,null),/*#__PURE__*/React.createElement(TouchableOpacity,{onPress:function onPress(){return onClickB(item,index,Answer.B);}},/*#__PURE__*/React.createElement(ButtonText,{isSelected:Answer.B==item.selected,isShown:item.submitted&&Answer.B==item.correct},\"B. \".concat(item.b))),/*#__PURE__*/React.createElement(Divider,null),/*#__PURE__*/React.createElement(TouchableOpacity,{onPress:function onPress(){return onClickC(item,index,Answer.C);}},/*#__PURE__*/React.createElement(ButtonText,{isSelected:Answer.C==item.selected,isShown:item.submitted&&Answer.C==item.correct},\"C. \".concat(item.c))),/*#__PURE__*/React.createElement(Divider,null),/*#__PURE__*/React.createElement(TouchableOpacity,{onPress:function onPress(){return onClickD(item,index,Answer.D);}},/*#__PURE__*/React.createElement(ButtonText,{isSelected:Answer.D==item.selected,isShown:item.submitted&&Answer.D==item.correct},\"D. \".concat(item.d))),/*#__PURE__*/React.createElement(Divider,null));};export default memo(QuestionItem);","map":{"version":3,"sources":["/Users/thieunguyen/Desktop/Project/ReactJS/web-ets-2020/src/containers/Part3/shared/QuestionItem.tsx"],"names":["React","memo","TouchableOpacity","styled","Fonts","Colors","Answer","Divider","Text","Normal","ItemContainer","View","SECOND_COLOR","ButtonText","props","isSelected","isShown","QuestionItem","item","index","onClickA","onClickB","onClickC","onClickD","question","A","selected","submitted","correct","a","B","b","C","c","D","d"],"mappings":"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","sourcesContent":["import React, { FC, memo } from 'react';\nimport { TouchableOpacity } from 'react-native';\nimport styled from 'styled-components/native';\nimport Fonts from '../../../theme/fonts';\nimport Colors from '../../../theme/colors';\nimport { Answer } from '../../../constants/AppConstants';\nimport Divider from '../../../components/Divider';\n\ninterface Props {\n  item: any;\n  index: number;\n  onClickA: (item: any, index: number, selected: string) => void;\n  onClickB: (item: any, index: number, selected: string) => void;\n  onClickC: (item: any, index: number, selected: string) => void;\n  onClickD: (item: any, index: number, selected: string) => void;\n}\n\ninterface StyledProps {\n  width?: number;\n  marginHorizontal?: number;\n  paddidngHorizontal?: number;\n  isCorrect?: boolean;\n  isSelected?: boolean;\n  isShown?: boolean;\n}\n\nconst Text = styled(Fonts.Normal)`\n  font-size: 18px;\n  padding: 8px;\n`;\n\nconst ItemContainer = styled.View<Pick<StyledProps, 'width'>>`\n  width: 100%;\n  background-color: ${Colors.SECOND_COLOR};\n  padding-vertical: 4px;\n`;\n\nconst ButtonText = styled(Fonts.Normal)<StyledProps>`\n  font-size: 18px;\n  color: ${props => props.isSelected ? 'green' : 'black'};\n  background-color: ${props => props.isShown ? 'yellow' : Colors.SECOND_COLOR}};\n  padding: 8px;\n`;\n\nconst QuestionItem: FC<Props> = ({ item, index, onClickA, onClickB, onClickC, onClickD }) => {\n  return (\n    <ItemContainer>\n      <Text >{`${index + 1}/ ${item.question || ''}`}</Text>\n      <Divider />\n      <TouchableOpacity onPress={() => onClickA(item, index, Answer.A)}>\n        <ButtonText isSelected={Answer.A == item.selected} isShown={item.submitted && Answer.A == item.correct}>{`A. ${item.a}`}</ButtonText>\n      </TouchableOpacity>\n      <Divider />\n      <TouchableOpacity onPress={() => onClickB(item, index, Answer.B)}>\n        <ButtonText isSelected={Answer.B == item.selected} isShown={item.submitted && Answer.B == item.correct}>{`B. ${item.b}`}</ButtonText>\n      </TouchableOpacity>\n      <Divider />\n      <TouchableOpacity onPress={() => onClickC(item, index, Answer.C)}>\n        <ButtonText isSelected={Answer.C == item.selected} isShown={item.submitted && Answer.C == item.correct}>{`C. ${item.c}`}</ButtonText>\n      </TouchableOpacity>\n      <Divider />\n      <TouchableOpacity onPress={() => onClickD(item, index, Answer.D)}>\n        <ButtonText isSelected={Answer.D == item.selected} isShown={item.submitted && Answer.D == item.correct}>{`D. ${item.d}`}</ButtonText>\n      </TouchableOpacity>\n      <Divider />\n  </ItemContainer>\n  );\n};\n\nexport default memo(QuestionItem);\n"]},"metadata":{},"sourceType":"module"}