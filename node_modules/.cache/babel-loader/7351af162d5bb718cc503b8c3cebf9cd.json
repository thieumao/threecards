{"ast":null,"code":"var _jsxFileName = \"/Users/thieunguyen/Desktop/Project/ReactJS/web-ets-2020/src/components/AudioPlayer/index.js\";\nimport React, { useRef } from 'react';\n\nconst AudioPlayer = ({\n  audioPath,\n  play\n}) => {\n  const audioRef = useRef();\n  const [currentTime, setCurrentTime] = useState(0);\n  const [duration, setDuration] = useState(0);\n  const [isPlay, setPlay] = useState(false);\n\n  const handleLoadedData = () => {\n    setPlay(play);\n\n    if (play) {\n      audioRef.current.play();\n    } else {\n      audioRef.current.pause();\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"audio\", {\n    ref: audioRef,\n    src: audioPath,\n    onLoadedData: handleLoadedData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 5\n    }\n  });\n};\n\nexport default AudioPlayer;","map":{"version":3,"sources":["/Users/thieunguyen/Desktop/Project/ReactJS/web-ets-2020/src/components/AudioPlayer/index.js"],"names":["React","useRef","AudioPlayer","audioPath","play","audioRef","currentTime","setCurrentTime","useState","duration","setDuration","isPlay","setPlay","handleLoadedData","current","pause"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,MAAhB,QAA8B,OAA9B;;AAEA,MAAMC,WAAW,GAAG,CAAC;AAAEC,EAAAA,SAAF;AAAaC,EAAAA;AAAb,CAAD,KAAyB;AAC3C,QAAMC,QAAQ,GAAGJ,MAAM,EAAvB;AACA,QAAM,CAACK,WAAD,EAAcC,cAAd,IAAgCC,QAAQ,CAAC,CAAD,CAA9C;AACA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BF,QAAQ,CAAC,CAAD,CAAxC;AACA,QAAM,CAACG,MAAD,EAASC,OAAT,IAAoBJ,QAAQ,CAAC,KAAD,CAAlC;;AAEA,QAAMK,gBAAgB,GAAG,MAAM;AAC7BD,IAAAA,OAAO,CAACR,IAAD,CAAP;;AACA,QAAIA,IAAJ,EAAU;AACRC,MAAAA,QAAQ,CAACS,OAAT,CAAiBV,IAAjB;AACD,KAFD,MAEO;AACLC,MAAAA,QAAQ,CAACS,OAAT,CAAiBC,KAAjB;AACD;AACF,GAPD;;AASA,sBACE;AACE,IAAA,GAAG,EAAEV,QADP;AAEE,IAAA,GAAG,EAAEF,SAFP;AAGE,IAAA,YAAY,EAAEU,gBAHhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAOD,CAtBD;;AAwBA,eAAeX,WAAf","sourcesContent":["import React, { useRef } from 'react';\n\nconst AudioPlayer = ({ audioPath, play }) => {\n  const audioRef = useRef();\n  const [currentTime, setCurrentTime] = useState(0);\n  const [duration, setDuration] = useState(0);\n  const [isPlay, setPlay] = useState(false);\n\n  const handleLoadedData = () => {\n    setPlay(play);\n    if (play) {\n      audioRef.current.play();\n    } else {\n      audioRef.current.pause();\n    }\n  };\n\n  return (\n    <audio\n      ref={audioRef}\n      src={audioPath}\n      onLoadedData={handleLoadedData}\n    />\n  );\n};\n\nexport default AudioPlayer;\n"]},"metadata":{},"sourceType":"module"}