{"ast":null,"code":"import { useState, useEffect } from 'react';\n\nconst useWindowDimensions = ({\n  window\n}) => {\n  const hasWindow = typeof window !== 'undefined';\n\n  function getWindowDimensions() {\n    const width = hasWindow ? window.innerWidth : null;\n    const height = hasWindow ? window.innerHeight : null;\n    return {\n      width,\n      height\n    };\n  }\n\n  const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());\n  useEffect(() => {\n    if (hasWindow) {\n      function handleResize() {\n        setWindowDimensions(getWindowDimensions());\n      }\n\n      window.addEventListener('resize', handleResize);\n      return () => window.removeEventListener('resize', handleResize);\n    }\n  }, [hasWindow]);\n  return windowDimensions;\n};","map":{"version":3,"sources":["/Users/thieunguyen/Desktop/Project/ReactJS/web-ets-2020/src/hooks/windowDimensions.tsx"],"names":["useState","useEffect","useWindowDimensions","window","hasWindow","getWindowDimensions","width","innerWidth","height","innerHeight","windowDimensions","setWindowDimensions","handleResize","addEventListener","removeEventListener"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAEA,MAAMC,mBAAmB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAgB;AAE1C,QAAMC,SAAS,GAAG,OAAOD,MAAP,KAAkB,WAApC;;AAEA,WAASE,mBAAT,GAA+B;AAC7B,UAAMC,KAAK,GAAGF,SAAS,GAAGD,MAAM,CAACI,UAAV,GAAuB,IAA9C;AACA,UAAMC,MAAM,GAAGJ,SAAS,GAAGD,MAAM,CAACM,WAAV,GAAwB,IAAhD;AACA,WAAO;AACLH,MAAAA,KADK;AAELE,MAAAA;AAFK,KAAP;AAID;;AAED,QAAM,CAACE,gBAAD,EAAmBC,mBAAnB,IAA0CX,QAAQ,CAACK,mBAAmB,EAApB,CAAxD;AAEAJ,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIG,SAAJ,EAAe;AACb,eAASQ,YAAT,GAAwB;AACtBD,QAAAA,mBAAmB,CAACN,mBAAmB,EAApB,CAAnB;AACD;;AAEDF,MAAAA,MAAM,CAACU,gBAAP,CAAwB,QAAxB,EAAkCD,YAAlC;AACA,aAAO,MAAMT,MAAM,CAACW,mBAAP,CAA2B,QAA3B,EAAqCF,YAArC,CAAb;AACD;AACF,GATQ,EASN,CAACR,SAAD,CATM,CAAT;AAWA,SAAOM,gBAAP;AACD,CA3BD","sourcesContent":["import { useState, useEffect } from 'react';\n\nconst useWindowDimensions = ({ window }) => {\n\n  const hasWindow = typeof window !== 'undefined';\n\n  function getWindowDimensions() {\n    const width = hasWindow ? window.innerWidth : null;\n    const height = hasWindow ? window.innerHeight : null;\n    return {\n      width,\n      height,\n    };\n  }\n\n  const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());\n\n  useEffect(() => {\n    if (hasWindow) {\n      function handleResize() {\n        setWindowDimensions(getWindowDimensions());\n      }\n\n      window.addEventListener('resize', handleResize);\n      return () => window.removeEventListener('resize', handleResize);\n    }\n  }, [hasWindow]);\n\n  return windowDimensions;\n}"]},"metadata":{},"sourceType":"module"}