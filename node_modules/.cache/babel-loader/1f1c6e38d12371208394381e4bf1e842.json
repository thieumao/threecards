{"ast":null,"code":"import { createStore, combineReducers, applyMiddleware, compose } from 'redux';\nimport * as reducers from './modules';\nimport logger from 'redux-logger';\nimport { offline } from \"redux-offline\";\nimport offlineConfig from 'redux-offline/lib/defaults';\nimport * as localforage from \"localforage\";\nimport axios from 'axios';\nofflineConfig.persistOptions = {\n  storage: localforage\n}; // store offline data in indexedDB\n// overriding effect\n\nconst customConfig = { ...offlineConfig,\n  effect: (effect, action) => {\n    return axios.post(effect.url, action.payload && action.payload.content);\n  }\n};\nconst rootReducer = combineReducers(reducers);\nconst store = createStore(rootReducer, compose(applyMiddleware(logger), offline(customConfig)));\nexport default store;","map":{"version":3,"sources":["/Users/thieunguyen/Desktop/Project/ReactJS/web-ets-2020/src/store/index.js"],"names":["createStore","combineReducers","applyMiddleware","compose","reducers","logger","offline","offlineConfig","localforage","axios","persistOptions","storage","customConfig","effect","action","post","url","payload","content","rootReducer","store"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,eAAvC,EAAwDC,OAAxD,QAAuE,OAAvE;AACA,OAAO,KAAKC,QAAZ,MAA0B,WAA1B;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,SAASC,OAAT,QAAwB,eAAxB;AACA,OAAOC,aAAP,MAA0B,4BAA1B;AACA,OAAO,KAAKC,WAAZ,MAA6B,aAA7B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEAF,aAAa,CAACG,cAAd,GAA+B;AAAEC,EAAAA,OAAO,EAAEH;AAAX,CAA/B,C,CAAyD;AAEzD;;AACA,MAAMI,YAAY,GAAG,EACnB,GAAGL,aADgB;AAEnBM,EAAAA,MAAM,EAAE,CAACA,MAAD,EAASC,MAAT,KAAoB;AAC1B,WAAOL,KAAK,CAACM,IAAN,CAAWF,MAAM,CAACG,GAAlB,EAAuBF,MAAM,CAACG,OAAP,IAAkBH,MAAM,CAACG,OAAP,CAAeC,OAAxD,CAAP;AACD;AAJkB,CAArB;AAOA,MAAMC,WAAW,GAAGlB,eAAe,CAACG,QAAD,CAAnC;AACA,MAAMgB,KAAK,GAAGpB,WAAW,CACvBmB,WADuB,EAEvBhB,OAAO,CAACD,eAAe,CAACG,MAAD,CAAhB,EAA0BC,OAAO,CAACM,YAAD,CAAjC,CAFgB,CAAzB;AAKA,eAAeQ,KAAf","sourcesContent":["import { createStore, combineReducers, applyMiddleware, compose } from 'redux';\nimport * as reducers from './modules';\nimport logger from 'redux-logger';\nimport { offline } from \"redux-offline\";\nimport offlineConfig from 'redux-offline/lib/defaults';\nimport * as localforage from \"localforage\";\nimport axios from 'axios';\n\nofflineConfig.persistOptions = { storage: localforage }; // store offline data in indexedDB\n\n// overriding effect\nconst customConfig = {\n  ...offlineConfig,\n  effect: (effect, action) => {\n    return axios.post(effect.url, action.payload && action.payload.content);\n  }\n};\n\nconst rootReducer = combineReducers(reducers);\nconst store = createStore(\n  rootReducer, \n  compose(applyMiddleware(logger), offline(customConfig))\n);\n\nexport default store;\n"]},"metadata":{},"sourceType":"module"}