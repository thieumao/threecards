{"ast":null,"code":"var _jsxFileName = \"/Users/thieunguyen/Desktop/Project/ReactJS/web-ets-2020/src/components/AudioPlayer/index.js\";\nimport React, { useState, useRef } from 'react';\nimport Slider from 'react-input-slider';\nimport styled from 'styled-components/native';\nimport Colors from 'theme/colors';\nimport Fonts from 'theme/fonts';\nconst Container = styled.View`\n  border-bottom-color: ${Colors.DIVIDER};\n  border-bottom-width: 1px;\n  height: 50px;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n`;\nconst Text = styled(Fonts.Normal)`\n  font-size: 12px;\n  color: ${Colors.MAIN_COLOR};\n  margin: 4px;\n`;\n\nconst AudioPlayer = ({\n  audioPath,\n  play\n}) => {\n  const audioRef = useRef();\n  const [currentTime, setCurrentTime] = useState(0);\n  const [duration, setDuration] = useState(0);\n  const [isPlay, setPlay] = useState(false);\n  const [x, setX] = useState(0);\n\n  const handleLoadedData = () => {\n    setPlay(play);\n\n    if (play) {\n      audioRef.current.play();\n    } else {\n      audioRef.current.pause();\n    }\n  };\n\n  const onTimeUpdate = () => {\n    setCurrentTime(audioRef.current.currentTime);\n    setDuration(audioRef.current.duration);\n  };\n\n  return /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }\n  }, `${Math.round(currentTime)}`), /*#__PURE__*/React.createElement(\"audio\", {\n    style: {\n      marginHorizontal: 16,\n      paddingHorizontal: 16\n    },\n    ref: audioRef,\n    src: audioPath,\n    onLoadedData: handleLoadedData,\n    onTimeUpdate: onTimeUpdate,\n    onEnded: () => setPlay(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Slider, {\n    style: {\n      flex: 1,\n      height: 12,\n      margin: 8\n    },\n    xmin: 0,\n    xmax: duration,\n    axis: \"x\",\n    x: currentTime,\n    onChange: ({\n      x\n    }) => setX(currentTime),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }, `${Math.round(duration)}`));\n};\n\nexport default AudioPlayer;","map":{"version":3,"sources":["/Users/thieunguyen/Desktop/Project/ReactJS/web-ets-2020/src/components/AudioPlayer/index.js"],"names":["React","useState","useRef","Slider","styled","Colors","Fonts","Container","View","DIVIDER","Text","Normal","MAIN_COLOR","AudioPlayer","audioPath","play","audioRef","currentTime","setCurrentTime","duration","setDuration","isPlay","setPlay","x","setX","handleLoadedData","current","pause","onTimeUpdate","Math","round","marginHorizontal","paddingHorizontal","flex","height","margin"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,MAA1B,QAAwC,OAAxC;AACA,OAAOC,MAAP,MAAmB,oBAAnB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,MAAP,MAAoB,cAApB;AACA,OAAOC,KAAP,MAAkB,aAAlB;AAEA,MAAMC,SAAS,GAAGH,MAAM,CAACI,IAAK;yBACLH,MAAM,CAACI,OAAQ;;;;;;CADxC;AASA,MAAMC,IAAI,GAAGN,MAAM,CAACE,KAAK,CAACK,MAAP,CAAe;;WAEvBN,MAAM,CAACO,UAAW;;CAF7B;;AAMA,MAAMC,WAAW,GAAG,CAAC;AAAEC,EAAAA,SAAF;AAAaC,EAAAA;AAAb,CAAD,KAAyB;AAC3C,QAAMC,QAAQ,GAAGd,MAAM,EAAvB;AACA,QAAM,CAACe,WAAD,EAAcC,cAAd,IAAgCjB,QAAQ,CAAC,CAAD,CAA9C;AACA,QAAM,CAACkB,QAAD,EAAWC,WAAX,IAA0BnB,QAAQ,CAAC,CAAD,CAAxC;AACA,QAAM,CAACoB,MAAD,EAASC,OAAT,IAAoBrB,QAAQ,CAAC,KAAD,CAAlC;AACA,QAAM,CAACsB,CAAD,EAAIC,IAAJ,IAAYvB,QAAQ,CAAC,CAAD,CAA1B;;AAEA,QAAMwB,gBAAgB,GAAG,MAAM;AAC7BH,IAAAA,OAAO,CAACP,IAAD,CAAP;;AACA,QAAIA,IAAJ,EAAU;AACRC,MAAAA,QAAQ,CAACU,OAAT,CAAiBX,IAAjB;AACD,KAFD,MAEO;AACLC,MAAAA,QAAQ,CAACU,OAAT,CAAiBC,KAAjB;AACD;AACF,GAPD;;AASA,QAAMC,YAAY,GAAG,MAAM;AACzBV,IAAAA,cAAc,CAACF,QAAQ,CAACU,OAAT,CAAiBT,WAAlB,CAAd;AACAG,IAAAA,WAAW,CAACJ,QAAQ,CAACU,OAAT,CAAiBP,QAAlB,CAAX;AACD,GAHD;;AAKA,sBACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAQ,GAAEU,IAAI,CAACC,KAAL,CAAWb,WAAX,CAAwB,EAAlC,CADF,eAEE;AACE,IAAA,KAAK,EAAE;AAACc,MAAAA,gBAAgB,EAAE,EAAnB;AAAuBC,MAAAA,iBAAiB,EAAE;AAA1C,KADT;AAEE,IAAA,GAAG,EAAEhB,QAFP;AAGE,IAAA,GAAG,EAAEF,SAHP;AAIE,IAAA,YAAY,EAAEW,gBAJhB;AAKE,IAAA,YAAY,EAAEG,YALhB;AAME,IAAA,OAAO,EAAE,MAAMN,OAAO,CAAC,KAAD,CANxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,eAUE,oBAAC,MAAD;AACE,IAAA,KAAK,EAAE;AAACW,MAAAA,IAAI,EAAE,CAAP;AAAUC,MAAAA,MAAM,EAAE,EAAlB;AAAsBC,MAAAA,MAAM,EAAE;AAA9B,KADT;AAEE,IAAA,IAAI,EAAE,CAFR;AAGE,IAAA,IAAI,EAAEhB,QAHR;AAIE,IAAA,IAAI,EAAC,GAJP;AAKE,IAAA,CAAC,EAAEF,WALL;AAME,IAAA,QAAQ,EAAE,CAAC;AAAEM,MAAAA;AAAF,KAAD,KAAWC,IAAI,CAACP,WAAD,CAN3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAVF,eAkBE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAQ,GAAEY,IAAI,CAACC,KAAL,CAAWX,QAAX,CAAqB,EAA/B,CAlBF,CADF;AAsBD,CA3CD;;AA6CA,eAAeN,WAAf","sourcesContent":["import React, { useState, useRef } from 'react';\nimport Slider from 'react-input-slider';\nimport styled from 'styled-components/native';\nimport Colors from  'theme/colors';\nimport Fonts from 'theme/fonts';\n\nconst Container = styled.View`\n  border-bottom-color: ${Colors.DIVIDER};\n  border-bottom-width: 1px;\n  height: 50px;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst Text = styled(Fonts.Normal)`\n  font-size: 12px;\n  color: ${Colors.MAIN_COLOR};\n  margin: 4px;\n`;\n\nconst AudioPlayer = ({ audioPath, play }) => {\n  const audioRef = useRef();\n  const [currentTime, setCurrentTime] = useState(0);\n  const [duration, setDuration] = useState(0);\n  const [isPlay, setPlay] = useState(false);\n  const [x, setX] = useState(0);\n\n  const handleLoadedData = () => {\n    setPlay(play);\n    if (play) {\n      audioRef.current.play();\n    } else {\n      audioRef.current.pause();\n    }\n  };\n\n  const onTimeUpdate = () => {\n    setCurrentTime(audioRef.current.currentTime);\n    setDuration(audioRef.current.duration);\n  };\n\n  return (\n    <Container>\n      <Text>{`${Math.round(currentTime)}`}</Text>\n      <audio\n        style={{marginHorizontal: 16, paddingHorizontal: 16}}\n        ref={audioRef}\n        src={audioPath}\n        onLoadedData={handleLoadedData}\n        onTimeUpdate={onTimeUpdate}\n        onEnded={() => setPlay(false)}\n      />\n      <Slider\n        style={{flex: 1, height: 12, margin: 8}}\n        xmin={0}\n        xmax={duration}\n        axis=\"x\"\n        x={currentTime}\n        onChange={({ x }) => setX(currentTime)}\n      />\n      <Text>{`${Math.round(duration)}`}</Text>\n    </Container>\n  );\n};\n\nexport default AudioPlayer;\n"]},"metadata":{},"sourceType":"module"}