{"ast":null,"code":"var _jsxFileName = \"/Users/thieunguyen/Desktop/Project/ReactJS/web-ets-2020/src/containers/Part2/shared/Part2Item.tsx\";\nimport React, { memo } from 'react';\nimport { TouchableOpacity } from 'react-native';\nimport styled from 'styled-components/native';\nimport Fonts from '../../../theme/fonts';\nimport Colors from '../../../theme/colors';\nimport { Answer } from '../../../constants/AppConstants';\nimport Divider from '../../../components/Divider';\nimport RawHTML from '../../../components/RawHTML';\nconst Text = styled(Fonts.Bold)`\n  font-size: 18px;\n  padding: 8px;\n`;\nconst ScrollView = styled.ScrollView`\n  padding-horizontal: 4px;\n`;\nconst ItemContainer = styled.View`\n  width: 100%;\n  background-color: ${Colors.SECOND_COLOR};\n`;\nconst ButtonText = styled(Fonts.Normal)`\n  font-size: 18px;\n  color: ${props => props.isSelected ? 'green' : 'black'};\n  background-color: ${props => props.isShown ? 'yellow' : Colors.SECOND_COLOR};\n  padding: 8px;\n`;\nconst HTMLContainer = styled.View`\n  margin: 12px;\n`;\n\nconst Part2Item = ({\n  item,\n  index,\n  testNumber,\n  onClick\n}) => {\n  const audioPath = `https://github.com/QuizSystem/ETS2020Audios/blob/master/Test${testNumber}/part2_${index + 1}.mov?raw=true`;\n  return /*#__PURE__*/React.createElement(ItemContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ScrollView, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  }, `${index + 1}/ ${item.question || ''}`), /*#__PURE__*/React.createElement(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(TouchableOpacity, {\n    onPress: () => onClick(item, index, Answer.A),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ButtonText, {\n    isSelected: Answer.A == item.selected,\n    isShown: item.submitted && Answer.A == item.correct,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 11\n    }\n  }, `A. ${item.a}`)), /*#__PURE__*/React.createElement(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(TouchableOpacity, {\n    onPress: () => onClick(item, index, Answer.B),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ButtonText, {\n    isSelected: Answer.B == item.selected,\n    isShown: item.submitted && Answer.B == item.correct,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 11\n    }\n  }, `B. ${item.b}`)), /*#__PURE__*/React.createElement(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(TouchableOpacity, {\n    onPress: () => onClick(item, index, Answer.C),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ButtonText, {\n    isSelected: Answer.C == item.selected,\n    isShown: item.submitted && Answer.C == item.correct,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 11\n    }\n  }, `C. ${item.c}`)), /*#__PURE__*/React.createElement(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }), item.submitted && item.html && /*#__PURE__*/React.createElement(HTMLContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(RawHTML, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }\n  }, item.html))));\n};\n\nexport default memo(Part2Item);","map":{"version":3,"sources":["/Users/thieunguyen/Desktop/Project/ReactJS/web-ets-2020/src/containers/Part2/shared/Part2Item.tsx"],"names":["React","memo","TouchableOpacity","styled","Fonts","Colors","Answer","Divider","RawHTML","Text","Bold","ScrollView","ItemContainer","View","SECOND_COLOR","ButtonText","Normal","props","isSelected","isShown","HTMLContainer","Part2Item","item","index","testNumber","onClick","audioPath","question","A","selected","submitted","correct","a","B","b","C","c","html"],"mappings":"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","sourcesContent":["import React, { FC, memo } from 'react';\nimport { TouchableOpacity } from 'react-native';\nimport styled from 'styled-components/native';\nimport Fonts from '../../../theme/fonts';\nimport Colors from '../../../theme/colors';\nimport { Answer } from '../../../constants/AppConstants';\nimport Divider from '../../../components/Divider';\nimport RawHTML from '../../../components/RawHTML';\nimport AudioPlayer from 'components/AudioPlayer';\n\ninterface Props {\n  item: any;\n  index: number;\n  onClick: (item: any, index: number, selected: string) => void;\n}\n\ninterface StyledProps {\n  width?: number;\n  height?: number;\n  marginHorizontal?: number;\n  paddingHorizontal?: number;\n  paddingRight?: number;\n  isCorrect?: boolean;\n  isSelected?: boolean;\n  isShown?: boolean;\n}\n\nconst Text = styled(Fonts.Bold)`\n  font-size: 18px;\n  padding: 8px;\n`;\n\nconst ScrollView = styled.ScrollView`\n  padding-horizontal: 4px;\n`;\n\nconst ItemContainer = styled.View<StyledProps>`\n  width: 100%;\n  background-color: ${Colors.SECOND_COLOR};\n`;\n\nconst ButtonText = styled(Fonts.Normal) <StyledProps>`\n  font-size: 18px;\n  color: ${props => props.isSelected ? 'green' : 'black'};\n  background-color: ${props => props.isShown ? 'yellow' : Colors.SECOND_COLOR};\n  padding: 8px;\n`;\n\nconst HTMLContainer = styled.View`\n  margin: 12px;\n`;\n\nconst Part2Item: FC<Props> = ({ item, index, testNumber, onClick }) => {\n  const audioPath = `https://github.com/QuizSystem/ETS2020Audios/blob/master/Test${testNumber}/part2_${index + 1}.mov?raw=true`;\n\n  return (\n    <ItemContainer>\n      <ScrollView>\n        <Text >{`${index + 1}/ ${item.question || ''}`}</Text>\n        <Divider />\n        <TouchableOpacity onPress={() => onClick(item, index, Answer.A)}>\n          <ButtonText isSelected={Answer.A == item.selected} isShown={item.submitted && Answer.A == item.correct}>{`A. ${item.a}`}</ButtonText>\n        </TouchableOpacity>\n        <Divider />\n        <TouchableOpacity onPress={() => onClick(item, index, Answer.B)}>\n          <ButtonText isSelected={Answer.B == item.selected} isShown={item.submitted && Answer.B == item.correct}>{`B. ${item.b}`}</ButtonText>\n        </TouchableOpacity>\n        <Divider />\n        <TouchableOpacity onPress={() => onClick(item, index, Answer.C)}>\n          <ButtonText isSelected={Answer.C == item.selected} isShown={item.submitted && Answer.C == item.correct}>{`C. ${item.c}`}</ButtonText>\n        </TouchableOpacity>\n        <Divider />\n        {item.submitted && item.html && (\n          <HTMLContainer>\n            <RawHTML>{item.html}</RawHTML>\n          </HTMLContainer>\n        )}\n      </ScrollView>\n    </ItemContainer>\n  );\n};\n\nexport default memo(Part2Item);\n"]},"metadata":{},"sourceType":"module"}