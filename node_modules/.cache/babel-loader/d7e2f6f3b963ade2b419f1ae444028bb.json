{"ast":null,"code":"var _jsxFileName = \"/Users/thieunguyen/Desktop/Project/ReactJS/threecards/src/containers/Part1/index.tsx\";\nimport Screen from '../Screen';\nimport React, { useState, useEffect } from 'react';\nimport { FlatList } from 'react-native';\nimport styled from 'styled-components/native';\nimport { useParams } from 'react-router-dom';\nimport textAPI from 'api/textAPI';\nimport CryptoJS from 'crypto-js';\nimport Part1Item from './shared/Part1Item';\nimport Footer from 'components/Footer';\nimport { getPart } from 'store/selectors/selectors';\nimport { updatePartAction } from 'store/actionTypes/actionType';\nimport { useDispatch, useSelector } from 'react-redux';\nconst TestFlatList = styled(FlatList)`\n  width: 100%;\n  height: 100%;\n`;\n\nconst Part1 = () => {\n  const [testList, setTestList] = useState([]);\n  const [correctNumber, setCorrectNumber] = useState(-1);\n  const [totalNumber, setTotalNumber] = useState(-1);\n  const dispatch = useDispatch();\n  const {\n    testNumber\n  } = useParams();\n  const testName = `test${testNumber}`;\n  const part = useSelector(getPart(testName, 'part1'));\n  useEffect(() => {\n    getData(testNumber, part);\n  }, []);\n\n  const getData = async (testNumber, part) => {\n    const itemTypes = part && part.questions && part.questions.length > 0 ? part.questions : [];\n\n    if (itemTypes.length > 0) {\n      setTestList(itemTypes);\n    } else {\n      const data = await textAPI.get(testNumber, 1);\n      const plainData = CryptoJS.AES.decrypt(data, 'thieumao').toString(CryptoJS.enc.Utf8);\n      const json = JSON.parse(plainData);\n      setTestList(json);\n      updateDatabase(testName, json);\n    }\n  };\n\n  const updateDatabase = async (testName, partQuestions) => {\n    const partDetail = {\n      name: 'Part 1',\n      questions: partQuestions\n    };\n    dispatch(updatePartAction(testName, 'part1', partDetail));\n  };\n\n  const selectAnswer = (item, index, selected) => {\n    let arr = testList || [];\n\n    if (arr[index].selected != selected) {\n      arr[index].selected = selected;\n    } else {\n      arr[index].selected = undefined;\n    }\n\n    updateDatabase(testName, arr);\n  };\n\n  const onReset = () => {\n    let arr = testList || [];\n\n    for (let item of arr) {\n      item.submitted = false;\n      item.selected = undefined;\n    }\n\n    updateDatabase(testName, arr);\n    setCorrectNumber(-1);\n  };\n\n  const onSubmit = () => {\n    calculateScore();\n    let arr = testList || [];\n\n    for (let item of arr) {\n      if (item.selected) {\n        item.submitted = true;\n      }\n    }\n\n    updateDatabase(testName, arr);\n  };\n\n  const calculateScore = () => {\n    let correctCount = 0;\n    let count = 0;\n\n    for (const item of testList) {\n      count += 1;\n\n      if (item.selected) {\n        if (item.selected == item.correct) {\n          // correct\n          correctCount += 1;\n        } else {// incorrect\n        }\n      } else {// not choose\n        }\n    }\n\n    setCorrectNumber(correctCount);\n    setTotalNumber(count);\n  };\n\n  const renderItem = ({\n    index\n  }) => {\n    const item = testList[index];\n    return /*#__PURE__*/React.createElement(Part1Item, {\n      item: item,\n      index: index,\n      testNumber: testNumber,\n      onClick: selectAnswer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 7\n      }\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(Screen, {\n    canBack: true,\n    title: `Test ${testNumber} - Part 1`,\n    showMenu: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(TestFlatList, {\n    data: testList,\n    renderItem: renderItem,\n    keyExtractor: (item, index) => `${index}_${item}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Footer, {\n    correctNumber: correctNumber,\n    totalNumber: totalNumber,\n    onReset: onReset,\n    onSubmit: onSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 9\n    }\n  }));\n};\n\nexport default Part1;","map":{"version":3,"sources":["/Users/thieunguyen/Desktop/Project/ReactJS/threecards/src/containers/Part1/index.tsx"],"names":["Screen","React","useState","useEffect","FlatList","styled","useParams","textAPI","CryptoJS","Part1Item","Footer","getPart","updatePartAction","useDispatch","useSelector","TestFlatList","Part1","testList","setTestList","correctNumber","setCorrectNumber","totalNumber","setTotalNumber","dispatch","testNumber","testName","part","getData","itemTypes","questions","length","data","get","plainData","AES","decrypt","toString","enc","Utf8","json","JSON","parse","updateDatabase","partQuestions","partDetail","name","selectAnswer","item","index","selected","arr","undefined","onReset","submitted","onSubmit","calculateScore","correctCount","count","correct","renderItem"],"mappings":"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","sourcesContent":["import Screen from '../Screen';\nimport React, { FC, useState, useEffect } from 'react';\nimport { FlatList } from 'react-native';\nimport styled from 'styled-components/native';\nimport { useParams } from 'react-router-dom';\nimport textAPI from 'api/textAPI';\nimport CryptoJS from 'crypto-js';\nimport Part1Item from './shared/Part1Item';\nimport Footer from 'components/Footer';\nimport { getPart } from 'store/selectors/selectors';\nimport { updatePartAction } from 'store/actionTypes/actionType';\nimport { useDispatch, useSelector } from 'react-redux';\n\nconst TestFlatList = styled(FlatList as new () => FlatList<string>)`\n  width: 100%;\n  height: 100%;\n`;\n\nconst Part1: FC = () => {\n  const [testList, setTestList] = useState<any[]>([]);\n  const [correctNumber, setCorrectNumber] = useState<number>(-1);\n  const [totalNumber, setTotalNumber] = useState<number>(-1);\n\n  const dispatch = useDispatch();\n  const { testNumber } = useParams();\n  const testName = `test${testNumber}`;\n  const part  = useSelector(getPart(testName, 'part1'));\n  useEffect(() => {\n    getData(testNumber, part);\n  }, []);\n\n  const getData = async (testNumber: number, part: any) => {\n    const itemTypes: any[] = (part && part.questions && part.questions.length > 0) ? part.questions : [];\n    if (itemTypes.length > 0) {\n      setTestList(itemTypes);\n    } else {\n      const data = await textAPI.get(testNumber, 1);\n      const plainData = CryptoJS.AES.decrypt(data, 'thieumao').toString(CryptoJS.enc.Utf8);\n      const json = JSON.parse(plainData);\n      setTestList(json);\n      updateDatabase(testName, json);\n    }\n  };\n\n  const updateDatabase = async (testName: string, partQuestions: any[]) => {\n    const partDetail = {\n      name: 'Part 1',\n      questions: partQuestions,\n    };\n    dispatch(updatePartAction(testName, 'part1', partDetail));\n  };\n\n  const selectAnswer = (item: any, index: number, selected: string) => {\n    let arr = testList || [];\n    if (arr[index].selected != selected) {\n      arr[index].selected = selected;\n    } else {\n      arr[index].selected = undefined;\n    }\n    updateDatabase(testName, arr);\n  };\n\n  const onReset = () => {\n    let arr = testList || [];\n    for (let item of arr) {\n      item.submitted = false;\n      item.selected = undefined;\n    }\n    updateDatabase(testName, arr);\n\n    setCorrectNumber(-1);\n  };\n\n  const onSubmit = () => {\n    calculateScore();\n    let arr = testList || [];\n    for (let item of arr) {\n      if (item.selected) {\n        item.submitted = true;\n      }\n    }\n    updateDatabase(testName, arr);\n  };\n\n  const calculateScore = () => {\n    let correctCount = 0;\n    let count = 0;\n    for (const item of testList) {\n      count += 1;\n      if (item.selected) {\n        if (item.selected == item.correct) {\n          // correct\n          correctCount += 1;\n        } else {\n          // incorrect\n        }\n      } else {\n        // not choose\n      }\n    }\n    setCorrectNumber(correctCount);\n    setTotalNumber(count);\n  };\n\n  const renderItem = ({ index }: { item; index }) => {\n    const item = testList[index];\n    return (\n      <Part1Item\n        item={item}\n        index={index}\n        testNumber={testNumber}\n        onClick={selectAnswer}\n      />\n    );\n  };\n\n  return (\n      <Screen canBack title={`Test ${testNumber} - Part 1`} showMenu={false}>\n        <TestFlatList\n          data={testList}\n          renderItem={renderItem}\n          keyExtractor={(item, index) => `${index}_${item}`}\n        />\n        <Footer correctNumber={correctNumber} totalNumber={totalNumber} onReset={onReset} onSubmit={onSubmit} />\n      </Screen>\n  );\n};\n\nexport default Part1;\n"]},"metadata":{},"sourceType":"module"}