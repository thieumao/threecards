{"ast":null,"code":"var _jsxFileName = \"/Users/thieunguyen/Desktop/Project/ReactJS/web-ets-2020/src/containers/Part5/index.tsx\";\nimport Screen from '../Screen';\nimport React, { useState, useEffect } from 'react';\nimport { FlatList } from 'react-native';\nimport styled from 'styled-components/native';\nimport { useParams } from 'react-router-dom';\nimport textAPI from 'api/textAPI';\nimport CryptoJS from 'crypto-js';\nimport Part5Item from './shared/Part5Item';\nimport Footer from 'components/Footer';\nimport { getPart } from 'store/selectors/selectors';\nimport { updatePartAction } from 'store/actionTypes/actionType';\nimport { useDispatch, useSelector } from 'react-redux';\nconst TestFlatList = styled(FlatList)`\n  width: 100%;\n  height: 100%;\n`;\n\nconst Part5 = () => {\n  const [testList, setTestList] = useState([]);\n  const [correctNumber, setCorrectNumber] = useState(-1);\n  const [totalNumber, setTotalNumber] = useState(-1);\n  const dispatch = useDispatch();\n  const {\n    testNumber\n  } = useParams();\n  const testName = `test${testNumber}`;\n  const part5 = useSelector(getPart(testName, 'part5'));\n  useEffect(() => {\n    getData(testNumber, part5);\n  }, []);\n\n  const getData = async (testNumber, part5) => {\n    const itemTypes = part5 && part5.questions && part5.questions.length > 0 ? part5.questions : [];\n\n    if (itemTypes.length > 0) {\n      setTestList(itemTypes);\n    } else {\n      const data = await textAPI.get(testNumber, 5);\n      const plainData = CryptoJS.AES.decrypt(data, 'thieumao').toString(CryptoJS.enc.Utf8);\n      const json = JSON.parse(plainData);\n      setTestList(json);\n      updateDatabase(testName, json);\n    }\n  };\n\n  const updateDatabase = async (testName, part5Questions) => {\n    const part5Detail = {\n      name: 'Part 5',\n      questions: part5Questions\n    };\n    dispatch(updatePartAction(testName, 'part5', part5Detail));\n  };\n\n  const selectAnswer = (item, index, selected) => {\n    console.log('>>>>>> selectAnswer');\n    console.log(item);\n    console.log(index);\n    console.log(selected);\n    let arr = testList || [];\n\n    if (arr[index].selected != selected) {\n      arr[index].selected = selected;\n    } else {\n      arr[index].selected = undefined;\n    }\n\n    updateDatabase(testName, arr);\n  };\n\n  const onReset = () => {\n    let arr = testList || [];\n\n    for (let item of arr) {\n      item.submitted = false;\n      item.selected = undefined;\n    }\n\n    updateDatabase(testName, arr);\n    setCorrectNumber(-1);\n  };\n\n  const onSubmit = () => {\n    calculateScore();\n    let arr = testList || [];\n\n    for (let item of arr) {\n      if (item.selected) {\n        item.submitted = true;\n      }\n    }\n\n    updateDatabase(testName, arr);\n  };\n\n  const calculateScore = () => {\n    let wrongCount = 0;\n    let correctCount = 0;\n    let count = 0;\n\n    for (const item of testList) {\n      count += 1;\n\n      if (item.selected) {\n        if (item.selected == item.correct) {\n          // correct\n          correctCount += 1;\n        } else {\n          // incorrect\n          listChoose.push(Choose.INCORRECT);\n          wrongCount += 1;\n        }\n      } else {\n        // not choose\n        listChoose.push(Choose.NONE);\n      }\n    }\n\n    setChooseList(listChoose);\n    setWrongNumber(wrongCount);\n    setCorrectNumber(correctCount);\n    setTotalNumber(count);\n  };\n\n  const renderItem = ({\n    index\n  }) => {\n    const item = testList[index];\n    return /*#__PURE__*/React.createElement(Part5Item, {\n      item: item,\n      index: index,\n      onClick: selectAnswer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 7\n      }\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(Screen, {\n    canBack: true,\n    title: `Test ${testNumber} - Part 5`,\n    showMenu: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(TestFlatList, {\n    data: testList,\n    renderItem: renderItem,\n    keyExtractor: (item, index) => `${index}_${item}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Footer, {\n    correctNumber: correctNumber,\n    totalNumber: totalNumber,\n    onReset: () => onReset(),\n    onSubmit: () => onSubmit(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 9\n    }\n  }));\n};\n\nexport default Part5;","map":{"version":3,"sources":["/Users/thieunguyen/Desktop/Project/ReactJS/web-ets-2020/src/containers/Part5/index.tsx"],"names":["Screen","React","useState","useEffect","FlatList","styled","useParams","textAPI","CryptoJS","Part5Item","Footer","getPart","updatePartAction","useDispatch","useSelector","TestFlatList","Part5","testList","setTestList","correctNumber","setCorrectNumber","totalNumber","setTotalNumber","dispatch","testNumber","testName","part5","getData","itemTypes","questions","length","data","get","plainData","AES","decrypt","toString","enc","Utf8","json","JSON","parse","updateDatabase","part5Questions","part5Detail","name","selectAnswer","item","index","selected","console","log","arr","undefined","onReset","submitted","onSubmit","calculateScore","wrongCount","correctCount","count","correct","listChoose","push","Choose","INCORRECT","NONE","setChooseList","setWrongNumber","renderItem"],"mappings":"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","sourcesContent":["import Screen from '../Screen';\nimport React, { FC, useState, useEffect } from 'react';\nimport { FlatList } from 'react-native';\nimport styled from 'styled-components/native';\nimport { useParams } from 'react-router-dom';\nimport textAPI from 'api/textAPI';\nimport CryptoJS from 'crypto-js';\nimport Part5Item from './shared/Part5Item';\nimport Footer from 'components/Footer';\nimport { getPart } from 'store/selectors/selectors';\nimport { updatePartAction } from 'store/actionTypes/actionType';\nimport { useDispatch, useSelector } from 'react-redux';\n\nconst TestFlatList = styled(FlatList as new () => FlatList<string>)`\n  width: 100%;\n  height: 100%;\n`;\n\nconst Part5: FC = () => {\n  const [testList, setTestList] = useState<any[]>([]);\n  const [correctNumber, setCorrectNumber] = useState<number>(-1);\n  const [totalNumber, setTotalNumber] = useState<number>(-1);\n\n  const dispatch = useDispatch();\n  const { testNumber } = useParams();\n  const testName = `test${testNumber}`;\n  const part5  = useSelector(getPart(testName, 'part5'));\n  useEffect(() => {\n    getData(testNumber, part5);\n  }, []);\n\n  const getData = async (testNumber: number, part5: any) => {\n    const itemTypes: any[] = (part5 && part5.questions && part5.questions.length > 0) ? part5.questions : [];\n    if (itemTypes.length > 0) {\n      setTestList(itemTypes);\n    } else {\n      const data = await textAPI.get(testNumber, 5);\n      const plainData = CryptoJS.AES.decrypt(data, 'thieumao').toString(CryptoJS.enc.Utf8);\n      const json = JSON.parse(plainData);\n      setTestList(json);\n      updateDatabase(testName, json);\n    }\n  };\n\n  const updateDatabase = async (testName: string, part5Questions: any[]) => {\n    const part5Detail = {\n      name: 'Part 5',\n      questions: part5Questions,\n    };\n    dispatch(updatePartAction(testName, 'part5', part5Detail));\n  };\n\n  const selectAnswer = (item: any, index: number, selected: string) => {\n    console.log('>>>>>> selectAnswer');\n    console.log(item);\n    console.log(index);\n    console.log(selected);\n    let arr = testList || [];\n    if (arr[index].selected != selected) {\n      arr[index].selected = selected;\n    } else {\n      arr[index].selected = undefined;\n    }\n    updateDatabase(testName, arr);\n  };\n\n  const onReset = () => {\n    let arr = testList || [];\n    for (let item of arr) {\n      item.submitted = false;\n      item.selected = undefined;\n    }\n    updateDatabase(testName, arr);\n\n    setCorrectNumber(-1);\n  }\n\n  const onSubmit = () => {\n    calculateScore();\n    let arr = testList || [];\n    for (let item of arr) {\n      if (item.selected) {\n        item.submitted = true;\n      }\n    }\n    updateDatabase(testName, arr);\n  };\n\n  const calculateScore = () => {\n    let wrongCount = 0;\n    let correctCount = 0;\n    let count = 0;\n    for (const item of testList) {\n      count += 1;\n      if (item.selected) {\n        if (item.selected == item.correct) {\n          // correct\n          correctCount += 1;\n        } else {\n          // incorrect\n          listChoose.push(Choose.INCORRECT);\n          wrongCount += 1;\n        }\n      } else {\n        // not choose\n        listChoose.push(Choose.NONE);\n      }\n    }\n    setChooseList(listChoose);\n    setWrongNumber(wrongCount);\n    setCorrectNumber(correctCount);\n    setTotalNumber(count);\n  }\n\n  const renderItem = ({ index }: { item; index }) => {\n    const item = testList[index];\n    return (\n      <Part5Item\n        item={item}\n        index={index}\n        onClick={selectAnswer}\n      />\n    );\n  };\n\n  return (\n      <Screen canBack title={`Test ${testNumber} - Part 5`} showMenu>\n        <TestFlatList\n          data={testList}\n          renderItem={renderItem}\n          keyExtractor={(item, index) => `${index}_${item}`}\n        />\n        <Footer correctNumber={correctNumber} totalNumber={totalNumber} onReset={() => onReset()} onSubmit={() => onSubmit()} />\n      </Screen>\n  );\n};\n\nexport default Part5;\n"]},"metadata":{},"sourceType":"module"}