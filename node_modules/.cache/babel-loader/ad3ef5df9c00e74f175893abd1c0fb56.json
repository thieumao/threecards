{"ast":null,"code":"var _jsxFileName = \"/Users/thieunguyen/Desktop/Project/ReactJS/web-ets-2020/src/containers/Part5/index.tsx\";\nimport Screen from '../Screen';\nimport React, { useState, useEffect } from 'react';\nimport { FlatList } from 'react-native';\nimport styled from 'styled-components/native';\nimport Fonts from 'theme/fonts';\nimport Colors from 'theme/colors';\nimport { useHistory, useParams } from 'react-router-dom';\nimport textAPI from \"api/textAPI\";\nimport CryptoJS from 'crypto-js';\nimport Part5Item from './shared/Part5Item';\nimport Footer from 'components/Footer';\nimport { getNumber } from 'store/selectors/projectSelectors';\nimport { testAction, increaseAction } from 'store/actionTypes/actionType';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { updatePartAction } from 'store/actionTypes/ets2020ActionType';\nconst ButtonText = styled(Fonts.Bold)`\n  font-size: 18px;\n  background-color: ${Colors.BACKGROUND_COLOR};\n  margin: 10px;\n  padding: 10px;\n`;\nconst TestFlatList = styled(FlatList)`\n  width: 100%;\n  height: 100%;\n`;\n\nconst Part5 = () => {\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const {\n    testNumber\n  } = useParams();\n  const [testList, setTestList] = useState([]);\n  const valueNumber = useSelector(getNumber);\n  useEffect(() => {\n    console.log(\"Introduction\");\n    dispatch(testAction('name', 'Thieu Mao'));\n    dispatch(increaseAction('number', valueNumber));\n  }, []);\n  useEffect(() => {\n    try {\n      textAPI.get(testNumber, 5).then(data => {\n        const plainData = CryptoJS.AES.decrypt(data, 'thieumao').toString(CryptoJS.enc.Utf8);\n        const json = JSON.parse(plainData);\n        setTestList(json);\n      });\n    } catch (error) {}\n  }, []);\n\n  const updateDatabase = async (testName, part5Questions) => {\n    const part5Detail = {\n      name: 'Part 5',\n      questions: part5Questions\n    };\n    dispatch(updatePartAction(testName, 'part5', part5Detail));\n  };\n\n  const selectAnswer = (item, index, selected) => {\n    console.log('>>>>>> selectAnswer');\n    console.log(item);\n    console.log(index);\n    console.log(selected);\n  };\n\n  const renderItem = ({\n    index\n  }) => {\n    const item = testList[index];\n    return /*#__PURE__*/React.createElement(Part5Item, {\n      item: item,\n      index: index,\n      visibleIndex: 1,\n      onClick: selectAnswer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 7\n      }\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(Screen, {\n    canBack: true,\n    title: `Test ${testNumber} - Part 5`,\n    showMenu: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(TestFlatList, {\n    data: testList,\n    renderItem: renderItem,\n    keyExtractor: (item, index) => `${index}_${item}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Footer, {\n    correctNumber: 1,\n    totalNumber: 20,\n    onReset: () => null,\n    onSubmit: () => null,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }\n  }));\n};\n\nexport default Part5;","map":{"version":3,"sources":["/Users/thieunguyen/Desktop/Project/ReactJS/web-ets-2020/src/containers/Part5/index.tsx"],"names":["Screen","React","useState","useEffect","FlatList","styled","Fonts","Colors","useHistory","useParams","textAPI","CryptoJS","Part5Item","Footer","getNumber","testAction","increaseAction","useDispatch","useSelector","updatePartAction","ButtonText","Bold","BACKGROUND_COLOR","TestFlatList","Part5","dispatch","history","testNumber","testList","setTestList","valueNumber","console","log","get","then","data","plainData","AES","decrypt","toString","enc","Utf8","json","JSON","parse","error","updateDatabase","testName","part5Questions","part5Detail","name","questions","selectAnswer","item","index","selected","renderItem"],"mappings":"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","sourcesContent":["import Screen from '../Screen';\nimport React, { FC, useState, useEffect } from 'react';\nimport { FlatList, Dimensions } from 'react-native';\nimport styled from 'styled-components/native';\nimport Fonts from 'theme/fonts';\nimport Colors from 'theme/colors';\nimport { useHistory, useParams } from 'react-router-dom';\nimport textAPI from \"api/textAPI\";\nimport CryptoJS from 'crypto-js';\nimport Part5Item from './shared/Part5Item';\nimport Footer from 'components/Footer';\nimport { getNumber } from 'store/selectors/projectSelectors';\nimport { testAction, increaseAction } from 'store/actionTypes/actionType';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { updatePartAction } from 'store/actionTypes/ets2020ActionType';\n\nconst ButtonText = styled(Fonts.Bold)`\n  font-size: 18px;\n  background-color: ${Colors.BACKGROUND_COLOR};\n  margin: 10px;\n  padding: 10px;\n`;\n\nconst TestFlatList = styled(FlatList as new () => FlatList<string>)`\n  width: 100%;\n  height: 100%;\n`;\n\nconst Part5: FC = () => {\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const { testNumber } = useParams();\n\n  const [testList, setTestList] = useState<any[]>([]);\n\n  const valueNumber = useSelector(getNumber);\n\n  useEffect(() => {\n    console.log(\"Introduction\");\n    dispatch(testAction('name', 'Thieu Mao'));\n    dispatch(increaseAction('number', valueNumber));\n  }, []);\n\n  useEffect(() => {\n    try {\n      textAPI.get(testNumber, 5).then(data => {\n        const plainData = CryptoJS.AES.decrypt(data, 'thieumao').toString(CryptoJS.enc.Utf8);\n        const json = JSON.parse(plainData);\n        setTestList(json);\n      });\n    } catch (error) {}\n  }, []);\n\n  const updateDatabase = async (testName: string, part5Questions: any[]) => {\n    const part5Detail = {\n      name: 'Part 5',\n      questions: part5Questions,\n    };\n    dispatch(updatePartAction(testName, 'part5', part5Detail));\n  };\n\n  const selectAnswer = (item: any, index: number, selected: string) => {\n    console.log('>>>>>> selectAnswer');\n    console.log(item);\n    console.log(index);\n    console.log(selected);\n  };\n\n  const renderItem = ({ index }: { item; index }) => {\n    const item = testList[index];\n    return (\n      <Part5Item\n        item={item}\n        index={index}\n        visibleIndex={1}\n        onClick={selectAnswer}\n      />\n    );\n  };\n\n  return (\n      <Screen canBack title={`Test ${testNumber} - Part 5`} showMenu>\n        <TestFlatList\n          data={testList}\n          renderItem={renderItem}\n          keyExtractor={(item, index) => `${index}_${item}`}\n        />\n        <Footer correctNumber={1} totalNumber={20} onReset={() => null} onSubmit={() => null} />\n      </Screen>\n  );\n};\n\nexport default Part5;\n"]},"metadata":{},"sourceType":"module"}