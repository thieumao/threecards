{"ast":null,"code":"import _objectSpread from\"/Users/thieunguyen/Desktop/Project/ReactJS/web-ets-2020/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{createStore,combineReducers,applyMiddleware,compose}from'redux';import*as reducers from'./modules';import logger from'redux-logger';import{offline}from\"redux-offline\";import offlineConfig from'redux-offline/lib/defaults';import*as localforage from\"localforage\";import axios from'axios';offlineConfig.persistOptions={storage:localforage};// store offline data in indexedDB\n// overriding effect\nvar customConfig=_objectSpread(_objectSpread({},offlineConfig),{},{effect:function effect(_effect,action){return axios.post(_effect.url,action.payload&&action.payload.content);}});var rootReducer=combineReducers(reducers);var store=createStore(rootReducer,compose(applyMiddleware(logger),offline(customConfig)));export default store;","map":{"version":3,"sources":["/Users/thieunguyen/Desktop/Project/ReactJS/web-ets-2020/src/store/index.js"],"names":["createStore","combineReducers","applyMiddleware","compose","reducers","logger","offline","offlineConfig","localforage","axios","persistOptions","storage","customConfig","effect","action","post","url","payload","content","rootReducer","store"],"mappings":"6KAAA,OAASA,WAAT,CAAsBC,eAAtB,CAAuCC,eAAvC,CAAwDC,OAAxD,KAAuE,OAAvE,CACA,MAAO,GAAKC,CAAAA,QAAZ,KAA0B,WAA1B,CACA,MAAOC,CAAAA,MAAP,KAAmB,cAAnB,CACA,OAASC,OAAT,KAAwB,eAAxB,CACA,MAAOC,CAAAA,aAAP,KAA0B,4BAA1B,CACA,MAAO,GAAKC,CAAAA,WAAZ,KAA6B,aAA7B,CACA,MAAOC,CAAAA,KAAP,KAAkB,OAAlB,CAEAF,aAAa,CAACG,cAAd,CAA+B,CAAEC,OAAO,CAAEH,WAAX,CAA/B,CAAyD;AAEzD;AACA,GAAMI,CAAAA,YAAY,gCACbL,aADa,MAEhBM,MAAM,CAAE,gBAACA,OAAD,CAASC,MAAT,CAAoB,CAC1B,MAAOL,CAAAA,KAAK,CAACM,IAAN,CAAWF,OAAM,CAACG,GAAlB,CAAuBF,MAAM,CAACG,OAAP,EAAkBH,MAAM,CAACG,OAAP,CAAeC,OAAxD,CAAP,CACD,CAJe,EAAlB,CAOA,GAAMC,CAAAA,WAAW,CAAGlB,eAAe,CAACG,QAAD,CAAnC,CACA,GAAMgB,CAAAA,KAAK,CAAGpB,WAAW,CACvBmB,WADuB,CAEvBhB,OAAO,CAACD,eAAe,CAACG,MAAD,CAAhB,CAA0BC,OAAO,CAACM,YAAD,CAAjC,CAFgB,CAAzB,CAKA,cAAeQ,CAAAA,KAAf","sourcesContent":["import { createStore, combineReducers, applyMiddleware, compose } from 'redux';\nimport * as reducers from './modules';\nimport logger from 'redux-logger';\nimport { offline } from \"redux-offline\";\nimport offlineConfig from 'redux-offline/lib/defaults';\nimport * as localforage from \"localforage\";\nimport axios from 'axios';\n\nofflineConfig.persistOptions = { storage: localforage }; // store offline data in indexedDB\n\n// overriding effect\nconst customConfig = {\n  ...offlineConfig,\n  effect: (effect, action) => {\n    return axios.post(effect.url, action.payload && action.payload.content);\n  }\n};\n\nconst rootReducer = combineReducers(reducers);\nconst store = createStore(\n  rootReducer, \n  compose(applyMiddleware(logger), offline(customConfig))\n);\n\nexport default store;\n"]},"metadata":{},"sourceType":"module"}