{"ast":null,"code":"var _jsxFileName = \"/Users/thieunguyen/Desktop/Project/ReactJS/web-ets-2020/src/components/AudioPlayer/index.js\";\nimport React, { useState, useRef } from 'react';\nimport Slider from 'react-input-slider';\n\nconst AudioPlayer = ({\n  audioPath,\n  play\n}) => {\n  const audioRef = useRef();\n  const [currentTime, setCurrentTime] = useState(0);\n  const [duration, setDuration] = useState(0);\n  const [isPlay, setPlay] = useState(false);\n  const [x, setX] = useState(0);\n\n  const handleLoadedData = () => {\n    setPlay(play);\n\n    if (play) {\n      audioRef.current.play();\n    } else {\n      audioRef.current.pause();\n    }\n  };\n\n  const onTimeUpdate = () => {\n    setCurrentTime(Math.round(audioRef.current.currentTime));\n    setDuration(audioRef.current.duration);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 5\n    }\n  }, `${currentTime}`, /*#__PURE__*/React.createElement(\"audio\", {\n    ref: audioRef,\n    src: audioPath,\n    onLoadedData: handleLoadedData,\n    onTimeUpdate: onTimeUpdate,\n    onEnded: () => setPlay(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Slider, {\n    xmin: 0,\n    xmax: duration,\n    axis: \"x\",\n    x: x,\n    onChange: ({\n      x\n    }) => setX(currentTime),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }\n  }), `${duration}`);\n};\n\nexport default AudioPlayer;","map":{"version":3,"sources":["/Users/thieunguyen/Desktop/Project/ReactJS/web-ets-2020/src/components/AudioPlayer/index.js"],"names":["React","useState","useRef","Slider","AudioPlayer","audioPath","play","audioRef","currentTime","setCurrentTime","duration","setDuration","isPlay","setPlay","x","setX","handleLoadedData","current","pause","onTimeUpdate","Math","round"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,MAA1B,QAAwC,OAAxC;AACA,OAAOC,MAAP,MAAmB,oBAAnB;;AAEA,MAAMC,WAAW,GAAG,CAAC;AAAEC,EAAAA,SAAF;AAAaC,EAAAA;AAAb,CAAD,KAAyB;AAC3C,QAAMC,QAAQ,GAAGL,MAAM,EAAvB;AACA,QAAM,CAACM,WAAD,EAAcC,cAAd,IAAgCR,QAAQ,CAAC,CAAD,CAA9C;AACA,QAAM,CAACS,QAAD,EAAWC,WAAX,IAA0BV,QAAQ,CAAC,CAAD,CAAxC;AACA,QAAM,CAACW,MAAD,EAASC,OAAT,IAAoBZ,QAAQ,CAAC,KAAD,CAAlC;AACA,QAAM,CAACa,CAAD,EAAIC,IAAJ,IAAYd,QAAQ,CAAC,CAAD,CAA1B;;AAEA,QAAMe,gBAAgB,GAAG,MAAM;AAC7BH,IAAAA,OAAO,CAACP,IAAD,CAAP;;AACA,QAAIA,IAAJ,EAAU;AACRC,MAAAA,QAAQ,CAACU,OAAT,CAAiBX,IAAjB;AACD,KAFD,MAEO;AACLC,MAAAA,QAAQ,CAACU,OAAT,CAAiBC,KAAjB;AACD;AACF,GAPD;;AASA,QAAMC,YAAY,GAAG,MAAM;AACzBV,IAAAA,cAAc,CAACW,IAAI,CAACC,KAAL,CAAWd,QAAQ,CAACU,OAAT,CAAiBT,WAA5B,CAAD,CAAd;AACAG,IAAAA,WAAW,CAACJ,QAAQ,CAACU,OAAT,CAAiBP,QAAlB,CAAX;AACD,GAHD;;AAKA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,GAAEF,WAAY,EADlB,eAEE;AACE,IAAA,GAAG,EAAED,QADP;AAEE,IAAA,GAAG,EAAEF,SAFP;AAGE,IAAA,YAAY,EAAEW,gBAHhB;AAIE,IAAA,YAAY,EAAEG,YAJhB;AAKE,IAAA,OAAO,EAAE,MAAMN,OAAO,CAAC,KAAD,CALxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,eASE,oBAAC,MAAD;AACE,IAAA,IAAI,EAAE,CADR;AAEE,IAAA,IAAI,EAAEH,QAFR;AAGE,IAAA,IAAI,EAAC,GAHP;AAIE,IAAA,CAAC,EAAEI,CAJL;AAKE,IAAA,QAAQ,EAAE,CAAC;AAAEA,MAAAA;AAAF,KAAD,KAAWC,IAAI,CAACP,WAAD,CAL3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATF,EAgBI,GAAEE,QAAS,EAhBf,CADF;AAoBD,CAzCD;;AA2CA,eAAeN,WAAf","sourcesContent":["import React, { useState, useRef } from 'react';\nimport Slider from 'react-input-slider';\n\nconst AudioPlayer = ({ audioPath, play }) => {\n  const audioRef = useRef();\n  const [currentTime, setCurrentTime] = useState(0);\n  const [duration, setDuration] = useState(0);\n  const [isPlay, setPlay] = useState(false);\n  const [x, setX] = useState(0);\n\n  const handleLoadedData = () => {\n    setPlay(play);\n    if (play) {\n      audioRef.current.play();\n    } else {\n      audioRef.current.pause();\n    }\n  };\n\n  const onTimeUpdate = () => {\n    setCurrentTime(Math.round(audioRef.current.currentTime));\n    setDuration(audioRef.current.duration);\n  };\n\n  return (\n    <div>\n      {`${currentTime}`}\n      <audio\n        ref={audioRef}\n        src={audioPath}\n        onLoadedData={handleLoadedData}\n        onTimeUpdate={onTimeUpdate}\n        onEnded={() => setPlay(false)}\n      />\n      <Slider\n        xmin={0}\n        xmax={duration}\n        axis=\"x\"\n        x={x}\n        onChange={({ x }) => setX(currentTime)}\n      />\n      {`${duration}`}\n    </div>\n  );\n};\n\nexport default AudioPlayer;\n"]},"metadata":{},"sourceType":"module"}