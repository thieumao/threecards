{"ast":null,"code":"var _jsxFileName = \"/Users/thieunguyen/Desktop/Project/ReactJS/web-ets-2020/src/containers/Part4/index.tsx\";\nimport Screen from '../Screen';\nimport React, { useState, useEffect } from 'react';\nimport { FlatList } from 'react-native';\nimport styled from 'styled-components/native';\nimport { useParams } from 'react-router-dom';\nimport textAPI from \"../../api/textAPI\";\nimport CryptoJS from 'crypto-js';\nimport Part4Item from './shared/Part4Item';\nimport Footer from 'components/Footer';\nimport { getPart } from 'store/selectors/selectors';\nimport { updatePartAction } from 'store/actionTypes/actionType';\nimport { useDispatch, useSelector } from 'react-redux';\nconst TestFlatList = styled(FlatList)`\n  width: 100%;\n  height: 100%;\n`;\n\nconst Part4 = () => {\n  const [testList, setTestList] = useState([]);\n  const [correctNumber, setCorrectNumber] = useState(-1);\n  const [totalNumber, setTotalNumber] = useState(-1);\n  const dispatch = useDispatch();\n  const {\n    testNumber\n  } = useParams();\n  const testName = `test${testNumber}`;\n  const part = useSelector(getPart(testName, 'part4'));\n  useEffect(() => {\n    getData(testNumber, part);\n  }, []);\n\n  const getData = async (testNumber, part) => {\n    const itemTypes = part && part.questions && part.questions.length > 0 ? part.questions : [];\n\n    if (itemTypes.length > 0) {\n      setTestList(itemTypes);\n    } else {\n      const data = await textAPI.get(testNumber, 4);\n      const plainData = CryptoJS.AES.decrypt(data, 'thieumao').toString(CryptoJS.enc.Utf8);\n      const json = JSON.parse(plainData);\n      setTestList(json);\n      updateDatabase(testName, json);\n    }\n  };\n\n  const updateDatabase = async (testName, partQuestions) => {\n    const partDetail = {\n      name: 'Part 6',\n      questions: partQuestions\n    };\n    dispatch(updatePartAction(testName, 'part4', partDetail));\n  };\n\n  const onSelectAnswer = (detailItem, questionPosition, selected, part4Index) => {\n    let arr = testList || [];\n\n    if (arr[part4Index].questions[questionPosition].selected != selected) {\n      arr[part4Index].questions[questionPosition].selected = selected;\n    } else {\n      arr[part4Index].questions[questionPosition].selected = undefined;\n    }\n\n    updateDatabase(testName, arr);\n  };\n\n  const onReset = () => {\n    let arr = testList || [];\n\n    for (let test of arr) {\n      test.isShownTranslate = false;\n      const questions = test.questions ? test.questions : [];\n\n      for (const question of questions) {\n        const item = question;\n\n        if (item) {\n          item.submitted = false;\n          item.selected = false;\n        }\n      }\n    }\n\n    updateDatabase(testName, arr);\n    setCorrectNumber(-1);\n  };\n\n  const onSubmit = () => {\n    calculateScore();\n    let arr = testList || [];\n\n    for (let test of arr) {\n      const questions = test.questions ? test.questions : [];\n\n      for (const question of questions) {\n        const item = question;\n\n        if (item && item.selected) {\n          test.isShownTranslate = true;\n          item.submitted = true;\n        }\n      }\n    }\n\n    updateDatabase(testName, arr);\n  };\n\n  const calculateScore = () => {\n    let correctCount = 0;\n    let count = 0;\n\n    for (const test of testList) {\n      const questions = test.questions ? test.questions : [];\n\n      for (const question of questions) {\n        count += 1;\n        const item = question;\n\n        if (item && item.selected) {\n          if (item.selected == item.correct) {\n            correctCount += 1;\n          } else {}\n        } else {}\n      }\n    }\n\n    setCorrectNumber(correctCount);\n    setTotalNumber(count);\n  };\n\n  const renderItem = ({\n    index\n  }) => {\n    const item = testList[index];\n    return /*#__PURE__*/React.createElement(Part4Item, {\n      data: item,\n      part4Index: index,\n      onSelectAnswer: onSelectAnswer,\n      onCollapse: () => null,\n      onCollapseTranslation: () => null,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 7\n      }\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(Screen, {\n    canBack: true,\n    title: `Test ${testNumber} - Part 4`,\n    showMenu: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(TestFlatList, {\n    data: testList,\n    renderItem: renderItem,\n    keyExtractor: (item, index) => `${index}_${item}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Footer, {\n    correctNumber: correctNumber,\n    totalNumber: totalNumber,\n    onReset: onReset,\n    onSubmit: onSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 9\n    }\n  }));\n};\n\nexport default Part4;","map":{"version":3,"sources":["/Users/thieunguyen/Desktop/Project/ReactJS/web-ets-2020/src/containers/Part4/index.tsx"],"names":["Screen","React","useState","useEffect","FlatList","styled","useParams","textAPI","CryptoJS","Part4Item","Footer","getPart","updatePartAction","useDispatch","useSelector","TestFlatList","Part4","testList","setTestList","correctNumber","setCorrectNumber","totalNumber","setTotalNumber","dispatch","testNumber","testName","part","getData","itemTypes","questions","length","data","get","plainData","AES","decrypt","toString","enc","Utf8","json","JSON","parse","updateDatabase","partQuestions","partDetail","name","onSelectAnswer","detailItem","questionPosition","selected","part4Index","arr","undefined","onReset","test","isShownTranslate","question","item","submitted","onSubmit","calculateScore","correctCount","count","correct","renderItem","index"],"mappings":"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","sourcesContent":["import Screen from '../Screen';\nimport React, { FC, useState, useEffect } from 'react';\nimport { FlatList } from 'react-native';\nimport styled from 'styled-components/native';\nimport { useHistory, useParams } from 'react-router-dom';\nimport textAPI from \"../../api/textAPI\";\nimport CryptoJS from 'crypto-js';\nimport Part4Item from './shared/Part4Item';\nimport Footer from 'components/Footer';\nimport { getPart } from 'store/selectors/selectors';\nimport { updatePartAction } from 'store/actionTypes/actionType';\nimport { useDispatch, useSelector } from 'react-redux';\n\nconst TestFlatList = styled(FlatList as new () => FlatList<string>)`\n  width: 100%;\n  height: 100%;\n`;\n\nconst Part4: FC = () => {\n  const [testList, setTestList] = useState<any[]>([]);\n  const [correctNumber, setCorrectNumber] = useState<number>(-1);\n  const [totalNumber, setTotalNumber] = useState<number>(-1);\n\n  const dispatch = useDispatch();\n  const { testNumber } = useParams();\n  const testName = `test${testNumber}`;\n  const part  = useSelector(getPart(testName, 'part4'));\n  useEffect(() => {\n    getData(testNumber, part);\n  }, []);\n\n  const getData = async (testNumber: number, part: any) => {\n    const itemTypes: any[] = (part && part.questions && part.questions.length > 0) ? part.questions : [];\n    if (itemTypes.length > 0) {\n      setTestList(itemTypes);\n    } else {\n      const data = await textAPI.get(testNumber, 4);\n      const plainData = CryptoJS.AES.decrypt(data, 'thieumao').toString(CryptoJS.enc.Utf8);\n      const json = JSON.parse(plainData);\n      setTestList(json);\n      updateDatabase(testName, json);\n    }\n  };\n\n  const updateDatabase = async (testName: string, partQuestions: any[]) => {\n    const partDetail = {\n      name: 'Part 6',\n      questions: partQuestions,\n    };\n    dispatch(updatePartAction(testName, 'part4', partDetail));\n  };\n\n  const onSelectAnswer = (detailItem: any, questionPosition: number, selected: string, part4Index: number) => {\n    let arr = testList || [];\n    if (arr[part4Index].questions[questionPosition].selected != selected) {\n      arr[part4Index].questions[questionPosition].selected = selected;\n    } else {\n      arr[part4Index].questions[questionPosition].selected = undefined;\n    }\n    updateDatabase(testName, arr);\n  };\n\n  const onReset = () => {\n    let arr = testList || [];\n    for (let test of arr) {\n      test.isShownTranslate = false;\n      const questions = (test.questions) ? test.questions : [];\n      for (const question of questions) {\n        const item = question;\n        if (item) {\n          item.submitted = false;\n          item.selected = false;\n        }\n      }\n    }\n    updateDatabase(testName, arr);\n\n    setCorrectNumber(-1);\n  };\n\n  const onSubmit = () => {\n    calculateScore();\n    let arr = testList || [];\n    for (let test of arr) {\n      const questions = (test.questions) ? test.questions : [];\n      for (const question of questions) {\n        const item = question;\n        if (item && item.selected) {\n          test.isShownTranslate = true;\n          item.submitted = true;\n        }\n      }\n    }\n    updateDatabase(testName, arr);\n  };\n\n  const calculateScore = () => {\n    let correctCount = 0;\n    let count = 0;\n    for (const test of testList) {\n      const questions = (test.questions) ? test.questions : []; \n      for (const question of questions) {\n        count += 1;\n        const item = question;\n        if (item && item.selected) {\n          if (item.selected == item.correct) {\n            correctCount += 1;\n          } else {\n          }\n        } else {\n        }\n      }\n    }\n    setCorrectNumber(correctCount);\n    setTotalNumber(count);\n  };\n\n  const renderItem = ({ index }: { item: any; index: number }) => {\n    const item = testList[index];\n    return (\n      <Part4Item\n        data={item}\n        part4Index={index}\n        onSelectAnswer={onSelectAnswer}\n        onCollapse={() => null}\n        onCollapseTranslation={() => null}\n      />\n    );\n  };\n\n  return (\n      <Screen canBack title={`Test ${testNumber} - Part 4`} showMenu={false}>\n        <TestFlatList\n          data={testList}\n          renderItem={renderItem}\n          keyExtractor={(item, index) => `${index}_${item}`}\n        />\n        <Footer correctNumber={correctNumber} totalNumber={totalNumber} onReset={onReset} onSubmit={onSubmit} />\n      </Screen>\n  );\n};\n\nexport default Part4;\n"]},"metadata":{},"sourceType":"module"}