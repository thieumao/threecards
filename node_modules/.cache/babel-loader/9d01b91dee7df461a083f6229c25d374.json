{"ast":null,"code":"var _jsxFileName = \"/Users/thieunguyen/Desktop/Project/ReactJS/web-ets-2020/src/components/AudioPlayer/index.js\";\nimport React, { useState, useRef } from \"react\";\n\nconst AudioPlayer = ({\n  audioPath,\n  play\n}) => {\n  const audioRef = useRef();\n  const [currentTime, setCurrentTime] = useState(0);\n  const [duration, setDuration] = useState(0);\n  const [isPlay, setPlay] = useState(false);\n\n  const handleLoadedData = () => {\n    setPlay(play);\n\n    if (play) {\n      audioRef.current.play();\n    } else {\n      audioRef.current.pause();\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 5\n    }\n  }, currentTime / audioRef.current.duration, /*#__PURE__*/React.createElement(\"audio\", {\n    ref: audioRef,\n    src: audioPath,\n    onLoadedData: handleLoadedData,\n    onTimeUpdate: () => setCurrentTime(audioRef.current.currentTime),\n    onEnded: () => setPlay(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default AudioPlayer;","map":{"version":3,"sources":["/Users/thieunguyen/Desktop/Project/ReactJS/web-ets-2020/src/components/AudioPlayer/index.js"],"names":["React","useState","useRef","AudioPlayer","audioPath","play","audioRef","currentTime","setCurrentTime","duration","setDuration","isPlay","setPlay","handleLoadedData","current","pause"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,MAA1B,QAAwC,OAAxC;;AAEA,MAAMC,WAAW,GAAG,CAAC;AAAEC,EAAAA,SAAF;AAAaC,EAAAA;AAAb,CAAD,KAAyB;AAC3C,QAAMC,QAAQ,GAAGJ,MAAM,EAAvB;AACA,QAAM,CAACK,WAAD,EAAcC,cAAd,IAAgCP,QAAQ,CAAC,CAAD,CAA9C;AACA,QAAM,CAACQ,QAAD,EAAWC,WAAX,IAA0BT,QAAQ,CAAC,CAAD,CAAxC;AACA,QAAM,CAACU,MAAD,EAASC,OAAT,IAAoBX,QAAQ,CAAC,KAAD,CAAlC;;AAEA,QAAMY,gBAAgB,GAAG,MAAM;AAC7BD,IAAAA,OAAO,CAACP,IAAD,CAAP;;AACA,QAAIA,IAAJ,EAAU;AACRC,MAAAA,QAAQ,CAACQ,OAAT,CAAiBT,IAAjB;AACD,KAFD,MAEO;AACLC,MAAAA,QAAQ,CAACQ,OAAT,CAAiBC,KAAjB;AACD;AACF,GAPD;;AASA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGR,WAAW,GAAGD,QAAQ,CAACQ,OAAT,CAAiBL,QADlC,eAEE;AACE,IAAA,GAAG,EAAEH,QADP;AAEE,IAAA,GAAG,EAAEF,SAFP;AAGE,IAAA,YAAY,EAAES,gBAHhB;AAIE,IAAA,YAAY,EAAE,MAAML,cAAc,CAACF,QAAQ,CAACQ,OAAT,CAAiBP,WAAlB,CAJpC;AAKE,IAAA,OAAO,EAAE,MAAMK,OAAO,CAAC,KAAD,CALxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF;AAYD,CA3BD;;AA6BA,eAAeT,WAAf","sourcesContent":["import React, { useState, useRef } from \"react\";\n\nconst AudioPlayer = ({ audioPath, play }) => {\n  const audioRef = useRef();\n  const [currentTime, setCurrentTime] = useState(0);\n  const [duration, setDuration] = useState(0);\n  const [isPlay, setPlay] = useState(false);\n\n  const handleLoadedData = () => {\n    setPlay(play);\n    if (play) {\n      audioRef.current.play();\n    } else {\n      audioRef.current.pause();\n    }\n  };\n\n  return (\n    <div>\n      {currentTime / audioRef.current.duration}\n      <audio\n        ref={audioRef}\n        src={audioPath}\n        onLoadedData={handleLoadedData}\n        onTimeUpdate={() => setCurrentTime(audioRef.current.currentTime)}\n        onEnded={() => setPlay(false)}\n      />\n    </div>\n  );\n};\n\nexport default AudioPlayer;\n"]},"metadata":{},"sourceType":"module"}