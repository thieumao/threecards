{"ast":null,"code":"var _jsxFileName = \"/Users/thieunguyen/Desktop/Project/ReactJS/web-ets-2020/src/containers/Part1/shared/Part1Item.tsx\";\nimport React, { memo, useState } from 'react';\nimport { TouchableOpacity } from 'react-native';\nimport styled from 'styled-components/native';\nimport Fonts from '../../../theme/fonts';\nimport Colors from '../../../theme/colors';\nimport { Answer } from '../../../constants/AppConstants';\nimport Divider from '../../../components/Divider';\nimport RawHTML from '../../../components/RawHTML';\nconst Text = styled(Fonts.Bold)`\n  font-size: 18px;\n  padding: 8px;\n`;\nconst ScrollView = styled.ScrollView`\n  padding-horizontal: 4px;\n`;\nconst ItemContainer = styled.View`\n  width: 100%;\n  background-color: ${Colors.SECOND_COLOR};\n`;\nconst ButtonText = styled(Fonts.Normal)`\n  font-size: 18px;\n  color: ${props => props.isSelected ? 'green' : 'black'};\n  background-color: ${props => props.isShown ? 'yellow' : Colors.SECOND_COLOR};\n  padding: 8px;\n`;\nconst EmptyView = styled.View`\n  width: 100%;\n  height: 100%;\n`;\nconst HTMLContainer = styled.View`\n  margin: 12px;\n`; // width: ${props => props.width}px;\n// height: ${props => props.height}px;\n\nconst Image = styled.Image`\n  aspect-ratio: 1;\n  width: ${props => props.size}px;\n  height: ${props => props.size}px;\n  resize-mode: contain;\n  align-self: center;\n`;\n\nconst Part1Item = ({\n  item,\n  index,\n  visibleIndex,\n  onClickA,\n  onClickB,\n  onClickC,\n  onClickD\n}) => {\n  const [imagePath, setImagePath] = useState('https://raw.githubusercontent.com/QuizSystem/ETS2020Images/master/Test1/part1_1.png'); // render Empty View\n  // if (index < visibleIndex - 1 || index > visibleIndex + 1) {\n  //   return (\n  //     <ItemContainer width={itemWidth} height={Dimensions.get('window').height}>\n  //       <EmptyView />\n  //     </ItemContainer>\n  //   );\n  // }\n\n  return /*#__PURE__*/React.createElement(ItemContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ScrollView, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }\n  }, `${index + 1}/`), imagePath.length > 0 && /*#__PURE__*/React.createElement(Image, {\n    source: {\n      uri: imagePath\n    },\n    size: Dimensions.get('window').width * 80 / 100,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 34\n    }\n  }), /*#__PURE__*/React.createElement(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(TouchableOpacity, {\n    onPress: () => onClickA(item, index, Answer.A),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ButtonText, {\n    isSelected: Answer.A == item.selected,\n    isShown: item.submitted && Answer.A == item.correct,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 11\n    }\n  }, `A. ${item.a}`)), /*#__PURE__*/React.createElement(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(TouchableOpacity, {\n    onPress: () => onClickB(item, index, Answer.B),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ButtonText, {\n    isSelected: Answer.B == item.selected,\n    isShown: item.submitted && Answer.B == item.correct,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 11\n    }\n  }, `B. ${item.b}`)), /*#__PURE__*/React.createElement(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(TouchableOpacity, {\n    onPress: () => onClickC(item, index, Answer.C),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ButtonText, {\n    isSelected: Answer.C == item.selected,\n    isShown: item.submitted && Answer.C == item.correct,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 11\n    }\n  }, `C. ${item.c}`)), /*#__PURE__*/React.createElement(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(TouchableOpacity, {\n    onPress: () => onClickD(item, index, Answer.D),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ButtonText, {\n    isSelected: Answer.D == item.selected,\n    isShown: item.submitted && Answer.D == item.correct,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 11\n    }\n  }, `D. ${item.d}`)), /*#__PURE__*/React.createElement(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 9\n    }\n  }), item.submitted && item.html && /*#__PURE__*/React.createElement(HTMLContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(RawHTML, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }\n  }, item.html))));\n};\n\nexport default memo(Part1Item);","map":{"version":3,"sources":["/Users/thieunguyen/Desktop/Project/ReactJS/web-ets-2020/src/containers/Part1/shared/Part1Item.tsx"],"names":["React","memo","useState","TouchableOpacity","styled","Fonts","Colors","Answer","Divider","RawHTML","Text","Bold","ScrollView","ItemContainer","View","SECOND_COLOR","ButtonText","Normal","props","isSelected","isShown","EmptyView","HTMLContainer","Image","size","Part1Item","item","index","visibleIndex","onClickA","onClickB","onClickC","onClickD","imagePath","setImagePath","length","uri","Dimensions","get","width","A","selected","submitted","correct","a","B","b","C","c","D","d","html"],"mappings":"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","sourcesContent":["import React, { FC, memo, useState } from 'react';\nimport { TouchableOpacity } from 'react-native';\nimport styled from 'styled-components/native';\nimport Fonts from '../../../theme/fonts';\nimport Colors from '../../../theme/colors';\nimport { Answer } from '../../../constants/AppConstants';\nimport Divider from '../../../components/Divider';\nimport RawHTML from '../../../components/RawHTML';\n\ninterface Props {\n  item: any;\n  index: number;\n  visibleIndex: number;\n  onClickA: (item: any, index: number, selected: string) => void;\n  onClickB: (item: any, index: number, selected: string) => void;\n  onClickC: (item: any, index: number, selected: string) => void;\n  onClickD: (item: any, index: number, selected: string) => void;\n}\n\ninterface StyledProps {\n  size?: number;\n  width?: number;\n  height?: number;\n  marginHorizontal?: number;\n  paddingHorizontal?: number;\n  paddingRight?: number;\n  isCorrect?: boolean;\n  isSelected?: boolean;\n  isShown?: boolean;\n}\n\nconst Text = styled(Fonts.Bold)`\n  font-size: 18px;\n  padding: 8px;\n`;\n\nconst ScrollView = styled.ScrollView`\n  padding-horizontal: 4px;\n`;\n\nconst ItemContainer = styled.View<StyledProps>`\n  width: 100%;\n  background-color: ${Colors.SECOND_COLOR};\n`;\n\nconst ButtonText = styled(Fonts.Normal) <StyledProps>`\n  font-size: 18px;\n  color: ${props => props.isSelected ? 'green' : 'black'};\n  background-color: ${props => props.isShown ? 'yellow' : Colors.SECOND_COLOR};\n  padding: 8px;\n`;\n\nconst EmptyView = styled.View`\n  width: 100%;\n  height: 100%;\n`;\n\nconst HTMLContainer = styled.View`\n  margin: 12px;\n`;\n\n// width: ${props => props.width}px;\n// height: ${props => props.height}px;\nconst Image = styled.Image<StyledProps>`\n  aspect-ratio: 1;\n  width: ${props => props.size}px;\n  height: ${props => props.size}px;\n  resize-mode: contain;\n  align-self: center;\n`;\n\nconst Part1Item: FC<Props> = ({ item, index, visibleIndex, onClickA, onClickB, onClickC, onClickD }) => {\n  const [imagePath, setImagePath] = useState<string>('https://raw.githubusercontent.com/QuizSystem/ETS2020Images/master/Test1/part1_1.png');\n  // render Empty View\n  // if (index < visibleIndex - 1 || index > visibleIndex + 1) {\n  //   return (\n  //     <ItemContainer width={itemWidth} height={Dimensions.get('window').height}>\n  //       <EmptyView />\n  //     </ItemContainer>\n  //   );\n  // }\n  return (\n    <ItemContainer>\n      <ScrollView>\n        <Text >{`${index + 1}/`}</Text>\n        {imagePath.length > 0 && <Image source={{ uri: imagePath }} size={Dimensions.get('window').width * 80 / 100} />}\n        <Divider />\n        <TouchableOpacity onPress={() => onClickA(item, index, Answer.A)}>\n          <ButtonText isSelected={Answer.A == item.selected} isShown={item.submitted && Answer.A == item.correct}>{`A. ${item.a}`}</ButtonText>\n        </TouchableOpacity>\n        <Divider />\n        <TouchableOpacity onPress={() => onClickB(item, index, Answer.B)}>\n          <ButtonText isSelected={Answer.B == item.selected} isShown={item.submitted && Answer.B == item.correct}>{`B. ${item.b}`}</ButtonText>\n        </TouchableOpacity>\n        <Divider />\n        <TouchableOpacity onPress={() => onClickC(item, index, Answer.C)}>\n          <ButtonText isSelected={Answer.C == item.selected} isShown={item.submitted && Answer.C == item.correct}>{`C. ${item.c}`}</ButtonText>\n        </TouchableOpacity>\n        <Divider />\n        <TouchableOpacity onPress={() => onClickD(item, index, Answer.D)}>\n          <ButtonText isSelected={Answer.D == item.selected} isShown={item.submitted && Answer.D == item.correct}>{`D. ${item.d}`}</ButtonText>\n        </TouchableOpacity>\n        <Divider />\n        {item.submitted && item.html && (\n          <HTMLContainer>\n            <RawHTML>{item.html}</RawHTML>\n          </HTMLContainer>\n        )}\n      </ScrollView>\n    </ItemContainer>\n  );\n};\n\nexport default memo(Part1Item);\n"]},"metadata":{},"sourceType":"module"}