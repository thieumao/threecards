{"ast":null,"code":"var _jsxFileName = \"/Users/thieunguyen/Desktop/Project/ReactJS/web-ets-2020/src/containers/Part6/index.tsx\";\nimport Screen from '../Screen';\nimport React, { useState, useEffect } from 'react';\nimport { FlatList } from 'react-native';\nimport styled from 'styled-components/native';\nimport { useParams } from 'react-router-dom';\nimport textAPI from 'api/textAPI';\nimport CryptoJS from 'crypto-js';\nimport Part6Item from './shared/Part6Item';\nimport Footer from 'components/Footer';\nimport { getPart } from 'store/selectors/selectors';\nimport { updatePartAction } from 'store/actionTypes/actionType';\nimport { useDispatch, useSelector } from 'react-redux';\nconst TestFlatList = styled(FlatList)`\n  width: 100%;\n  height: 100%;\n`;\n\nconst Part6 = () => {\n  const [testList, setTestList] = useState([]);\n  const [correctNumber, setCorrectNumber] = useState(-1);\n  const [totalNumber, setTotalNumber] = useState(-1);\n  const dispatch = useDispatch();\n  const {\n    testNumber\n  } = useParams();\n  const testName = `test${testNumber}`;\n  const part6 = useSelector(getPart(testName, 'part6'));\n  useEffect(() => {\n    getData(testNumber, part6);\n  }, []);\n\n  const getData = async (testNumber, part5) => {\n    const itemTypes = part5 && part5.questions && part5.questions.length > 0 ? part5.questions : [];\n\n    if (itemTypes.length > 0) {\n      setTestList(itemTypes);\n    } else {\n      const data = await textAPI.get(testNumber, 6);\n      const plainData = CryptoJS.AES.decrypt(data, 'thieumao').toString(CryptoJS.enc.Utf8);\n      const json = JSON.parse(plainData);\n      setTestList(json);\n      updateDatabase(testName, json);\n    }\n  };\n\n  const updateDatabase = async (testName, part5Questions) => {\n    const part6Detail = {\n      name: 'Part 6',\n      questions: partQuestions\n    };\n    dispatch(updatePartAction(testName, 'part6', part6Detail));\n  };\n\n  const onSelectAnswer = (detailItem, questionPosition, selected, part6Index) => {\n    let arr = testList || [];\n\n    if (arr[part6Index].questions[questionPosition].data.selected != selected) {\n      arr[part6Index].questions[questionPosition].data.selected = selected;\n    } else {\n      arr[part6Index].questions[questionPosition].data.selected = undefined;\n    }\n\n    updateDatabase(testName, arr);\n  };\n\n  const onReset = () => {};\n\n  const onSubmit = () => {};\n\n  const renderItem = ({\n    index\n  }) => {\n    const item = testList[index];\n    return /*#__PURE__*/React.createElement(Part6Item, {\n      data: item,\n      part6Index: index,\n      visibleIndex: 1,\n      onSelectAnswer: () => null,\n      onCollapse: () => null,\n      onCollapseTranslation: () => null,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 7\n      }\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(Screen, {\n    canBack: true,\n    title: `Test ${testNumber} - Part 6`,\n    showMenu: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(TestFlatList, {\n    data: testList,\n    renderItem: renderItem,\n    keyExtractor: (item, index) => `${index}_${item}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Footer, {\n    correctNumber: correctNumber,\n    totalNumber: totalNumber,\n    onReset: () => onReset(),\n    onSubmit: () => onSubmit(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }\n  }));\n};\n\nexport default Part6;","map":{"version":3,"sources":["/Users/thieunguyen/Desktop/Project/ReactJS/web-ets-2020/src/containers/Part6/index.tsx"],"names":["Screen","React","useState","useEffect","FlatList","styled","useParams","textAPI","CryptoJS","Part6Item","Footer","getPart","updatePartAction","useDispatch","useSelector","TestFlatList","Part6","testList","setTestList","correctNumber","setCorrectNumber","totalNumber","setTotalNumber","dispatch","testNumber","testName","part6","getData","part5","itemTypes","questions","length","data","get","plainData","AES","decrypt","toString","enc","Utf8","json","JSON","parse","updateDatabase","part5Questions","part6Detail","name","partQuestions","onSelectAnswer","detailItem","questionPosition","selected","part6Index","arr","undefined","onReset","onSubmit","renderItem","index","item"],"mappings":"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","sourcesContent":["import Screen from '../Screen';\nimport React, { FC, useState, useEffect } from 'react';\nimport { FlatList } from 'react-native';\nimport styled from 'styled-components/native';\nimport { useParams } from 'react-router-dom';\nimport textAPI from 'api/textAPI';\nimport CryptoJS from 'crypto-js';\nimport Part6Item from './shared/Part6Item';\nimport Footer from 'components/Footer';\nimport { getPart } from 'store/selectors/selectors';\nimport { updatePartAction } from 'store/actionTypes/actionType';\nimport { useDispatch, useSelector } from 'react-redux';\n\nconst TestFlatList = styled(FlatList as new () => FlatList<string>)`\n  width: 100%;\n  height: 100%;\n`;\n\nconst Part6: FC = () => {\n  const [testList, setTestList] = useState<any[]>([]);\n  const [correctNumber, setCorrectNumber] = useState<number>(-1);\n  const [totalNumber, setTotalNumber] = useState<number>(-1);\n\n  const dispatch = useDispatch();\n  const { testNumber } = useParams();\n  const testName = `test${testNumber}`;\n  const part6  = useSelector(getPart(testName, 'part6'));\n  useEffect(() => {\n    getData(testNumber, part6);\n  }, []);\n\n  const getData = async (testNumber: number, part5: any) => {\n    const itemTypes: any[] = (part5 && part5.questions && part5.questions.length > 0) ? part5.questions : [];\n    if (itemTypes.length > 0) {\n      setTestList(itemTypes);\n    } else {\n      const data = await textAPI.get(testNumber, 6);\n      const plainData = CryptoJS.AES.decrypt(data, 'thieumao').toString(CryptoJS.enc.Utf8);\n      const json = JSON.parse(plainData);\n      setTestList(json);\n      updateDatabase(testName, json);\n    }\n  };\n\n  const updateDatabase = async (testName: string, part5Questions: any[]) => {\n    const part6Detail = {\n      name: 'Part 6',\n      questions: partQuestions,\n    };\n    dispatch(updatePartAction(testName, 'part6', part6Detail));\n  };\n\n  const onSelectAnswer = (detailItem: any, questionPosition: number, selected: string, part6Index: number) => {\n    let arr = testList || [];\n    if (arr[part6Index].questions[questionPosition].data.selected != selected) {\n      arr[part6Index].questions[questionPosition].data.selected = selected;\n    } else {\n      arr[part6Index].questions[questionPosition].data.selected = undefined;\n    }\n    updateDatabase(testName, arr);\n  };\n\n  const onReset = () => {};\n\n  const onSubmit = () => {};\n\n  const renderItem = ({ index }: { item: any; index: number }) => {\n    const item = testList[index];\n    return (\n      <Part6Item\n        data={item}\n        part6Index={index}\n        visibleIndex={1}\n        onSelectAnswer={() => null}\n        onCollapse={() => null}\n        onCollapseTranslation={() => null}\n      />\n    );\n  };\n\n  return (\n      <Screen canBack title={`Test ${testNumber} - Part 6`} showMenu>\n        <TestFlatList\n          data={testList}\n          renderItem={renderItem}\n          keyExtractor={(item, index) => `${index}_${item}`}\n        />\n        <Footer correctNumber={correctNumber} totalNumber={totalNumber} onReset={() => onReset()} onSubmit={() => onSubmit()} />\n      </Screen>\n  );\n};\n\nexport default Part6;\n"]},"metadata":{},"sourceType":"module"}