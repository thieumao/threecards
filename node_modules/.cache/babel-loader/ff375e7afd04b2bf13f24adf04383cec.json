{"ast":null,"code":"import { KEY_PREFIX, REHYDRATE } from './constants';\nimport createAsyncLocalStorage from './defaults/asyncLocalStorage';\nimport purgeStoredState from './purgeStoredState';\nimport stringify from 'json-stringify-safe';\nexport default function createPersistor(store, config) {\n  // defaults\n  var serializer = config.serialize === false ? function (data) {\n    return data;\n  } : defaultSerializer;\n  var deserializer = config.serialize === false ? function (data) {\n    return data;\n  } : defaultDeserializer;\n  var blacklist = config.blacklist || [];\n  var whitelist = config.whitelist || false;\n  var transforms = config.transforms || [];\n  var debounce = config.debounce || false;\n  var keyPrefix = config.keyPrefix !== undefined ? config.keyPrefix : KEY_PREFIX; // pluggable state shape (e.g. immutablejs)\n\n  var stateInit = config._stateInit || {};\n  var stateIterator = config._stateIterator || defaultStateIterator;\n  var stateGetter = config._stateGetter || defaultStateGetter;\n  var stateSetter = config._stateSetter || defaultStateSetter; // storage with keys -> getAllKeys for localForage support\n\n  var storage = config.storage || createAsyncLocalStorage('local');\n\n  if (storage.keys && !storage.getAllKeys) {\n    storage.getAllKeys = storage.keys;\n  } // initialize stateful values\n\n\n  var lastState = stateInit;\n  var paused = false;\n  var storesToProcess = [];\n  var timeIterator = null;\n  store.subscribe(function () {\n    if (paused) return;\n    var state = store.getState();\n    stateIterator(state, function (subState, key) {\n      if (!passWhitelistBlacklist(key)) return;\n      if (stateGetter(lastState, key) === stateGetter(state, key)) return;\n      if (storesToProcess.indexOf(key) !== -1) return;\n      storesToProcess.push(key);\n    });\n    var len = storesToProcess.length; // time iterator (read: debounce)\n\n    if (timeIterator === null) {\n      timeIterator = setInterval(function () {\n        if (paused && len === storesToProcess.length || storesToProcess.length === 0) {\n          clearInterval(timeIterator);\n          timeIterator = null;\n          return;\n        }\n\n        var key = storesToProcess.shift();\n        var storageKey = createStorageKey(key);\n        var endState = transforms.reduce(function (subState, transformer) {\n          return transformer.in(subState, key);\n        }, stateGetter(store.getState(), key));\n        if (typeof endState !== 'undefined') storage.setItem(storageKey, serializer(endState), warnIfSetError(key));\n      }, debounce);\n    }\n\n    lastState = state;\n  });\n\n  function passWhitelistBlacklist(key) {\n    if (whitelist && whitelist.indexOf(key) === -1) return false;\n    if (blacklist.indexOf(key) !== -1) return false;\n    return true;\n  }\n\n  function adhocRehydrate(incoming) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var state = {};\n\n    if (options.serial) {\n      stateIterator(incoming, function (subState, key) {\n        try {\n          var data = deserializer(subState);\n          var value = transforms.reduceRight(function (interState, transformer) {\n            return transformer.out(interState, key);\n          }, data);\n          state = stateSetter(state, key, value);\n        } catch (err) {\n          if (process.env.NODE_ENV !== 'production') console.warn('Error rehydrating data for key \"' + key + '\"', subState, err);\n        }\n      });\n    } else state = incoming;\n\n    store.dispatch(rehydrateAction(state));\n    return state;\n  }\n\n  function createStorageKey(key) {\n    return '' + keyPrefix + key;\n  } // return `persistor`\n\n\n  return {\n    rehydrate: adhocRehydrate,\n    pause: function pause() {\n      paused = true;\n    },\n    resume: function resume() {\n      paused = false;\n    },\n    purge: function purge(keys) {\n      return purgeStoredState({\n        storage: storage,\n        keyPrefix: keyPrefix\n      }, keys);\n    }\n  };\n}\n\nfunction warnIfSetError(key) {\n  return function setError(err) {\n    if (err && process.env.NODE_ENV !== 'production') {\n      console.warn('Error storing data for key:', key, err);\n    }\n  };\n}\n\nfunction defaultSerializer(data) {\n  return stringify(data, null, null, function (k, v) {\n    if (process.env.NODE_ENV !== 'production') return null;\n    throw new Error('\\n      redux-persist: cannot process cyclical state.\\n      Consider changing your state structure to have no cycles.\\n      Alternatively blacklist the corresponding reducer key.\\n      Cycle encounted at key \"' + k + '\" with value \"' + v + '\".\\n    ');\n  });\n}\n\nfunction defaultDeserializer(serial) {\n  return JSON.parse(serial);\n}\n\nfunction rehydrateAction(data) {\n  return {\n    type: REHYDRATE,\n    payload: data\n  };\n}\n\nfunction defaultStateIterator(collection, callback) {\n  return Object.keys(collection).forEach(function (key) {\n    return callback(collection[key], key);\n  });\n}\n\nfunction defaultStateGetter(state, key) {\n  return state[key];\n}\n\nfunction defaultStateSetter(state, key, value) {\n  state[key] = value;\n  return state;\n}","map":{"version":3,"sources":["/Users/thieunguyen/Desktop/Project/ReactJS/web-ets-2020/node_modules/redux-offline/node_modules/redux-persist/es/createPersistor.js"],"names":["KEY_PREFIX","REHYDRATE","createAsyncLocalStorage","purgeStoredState","stringify","createPersistor","store","config","serializer","serialize","data","defaultSerializer","deserializer","defaultDeserializer","blacklist","whitelist","transforms","debounce","keyPrefix","undefined","stateInit","_stateInit","stateIterator","_stateIterator","defaultStateIterator","stateGetter","_stateGetter","defaultStateGetter","stateSetter","_stateSetter","defaultStateSetter","storage","keys","getAllKeys","lastState","paused","storesToProcess","timeIterator","subscribe","state","getState","subState","key","passWhitelistBlacklist","indexOf","push","len","length","setInterval","clearInterval","shift","storageKey","createStorageKey","endState","reduce","transformer","in","setItem","warnIfSetError","adhocRehydrate","incoming","options","arguments","serial","value","reduceRight","interState","out","err","process","env","NODE_ENV","console","warn","dispatch","rehydrateAction","rehydrate","pause","resume","purge","setError","k","v","Error","JSON","parse","type","payload","collection","callback","Object","forEach"],"mappings":"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","sourcesContent":["import { KEY_PREFIX, REHYDRATE } from './constants';\nimport createAsyncLocalStorage from './defaults/asyncLocalStorage';\nimport purgeStoredState from './purgeStoredState';\nimport stringify from 'json-stringify-safe';\n\nexport default function createPersistor(store, config) {\n  // defaults\n  var serializer = config.serialize === false ? function (data) {\n    return data;\n  } : defaultSerializer;\n  var deserializer = config.serialize === false ? function (data) {\n    return data;\n  } : defaultDeserializer;\n  var blacklist = config.blacklist || [];\n  var whitelist = config.whitelist || false;\n  var transforms = config.transforms || [];\n  var debounce = config.debounce || false;\n  var keyPrefix = config.keyPrefix !== undefined ? config.keyPrefix : KEY_PREFIX;\n\n  // pluggable state shape (e.g. immutablejs)\n  var stateInit = config._stateInit || {};\n  var stateIterator = config._stateIterator || defaultStateIterator;\n  var stateGetter = config._stateGetter || defaultStateGetter;\n  var stateSetter = config._stateSetter || defaultStateSetter;\n\n  // storage with keys -> getAllKeys for localForage support\n  var storage = config.storage || createAsyncLocalStorage('local');\n  if (storage.keys && !storage.getAllKeys) {\n    storage.getAllKeys = storage.keys;\n  }\n\n  // initialize stateful values\n  var lastState = stateInit;\n  var paused = false;\n  var storesToProcess = [];\n  var timeIterator = null;\n\n  store.subscribe(function () {\n    if (paused) return;\n\n    var state = store.getState();\n\n    stateIterator(state, function (subState, key) {\n      if (!passWhitelistBlacklist(key)) return;\n      if (stateGetter(lastState, key) === stateGetter(state, key)) return;\n      if (storesToProcess.indexOf(key) !== -1) return;\n      storesToProcess.push(key);\n    });\n\n    var len = storesToProcess.length;\n\n    // time iterator (read: debounce)\n    if (timeIterator === null) {\n      timeIterator = setInterval(function () {\n        if (paused && len === storesToProcess.length || storesToProcess.length === 0) {\n          clearInterval(timeIterator);\n          timeIterator = null;\n          return;\n        }\n\n        var key = storesToProcess.shift();\n        var storageKey = createStorageKey(key);\n        var endState = transforms.reduce(function (subState, transformer) {\n          return transformer.in(subState, key);\n        }, stateGetter(store.getState(), key));\n        if (typeof endState !== 'undefined') storage.setItem(storageKey, serializer(endState), warnIfSetError(key));\n      }, debounce);\n    }\n\n    lastState = state;\n  });\n\n  function passWhitelistBlacklist(key) {\n    if (whitelist && whitelist.indexOf(key) === -1) return false;\n    if (blacklist.indexOf(key) !== -1) return false;\n    return true;\n  }\n\n  function adhocRehydrate(incoming) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    var state = {};\n    if (options.serial) {\n      stateIterator(incoming, function (subState, key) {\n        try {\n          var data = deserializer(subState);\n          var value = transforms.reduceRight(function (interState, transformer) {\n            return transformer.out(interState, key);\n          }, data);\n          state = stateSetter(state, key, value);\n        } catch (err) {\n          if (process.env.NODE_ENV !== 'production') console.warn('Error rehydrating data for key \"' + key + '\"', subState, err);\n        }\n      });\n    } else state = incoming;\n\n    store.dispatch(rehydrateAction(state));\n    return state;\n  }\n\n  function createStorageKey(key) {\n    return '' + keyPrefix + key;\n  }\n\n  // return `persistor`\n  return {\n    rehydrate: adhocRehydrate,\n    pause: function pause() {\n      paused = true;\n    },\n    resume: function resume() {\n      paused = false;\n    },\n    purge: function purge(keys) {\n      return purgeStoredState({ storage: storage, keyPrefix: keyPrefix }, keys);\n    }\n  };\n}\n\nfunction warnIfSetError(key) {\n  return function setError(err) {\n    if (err && process.env.NODE_ENV !== 'production') {\n      console.warn('Error storing data for key:', key, err);\n    }\n  };\n}\n\nfunction defaultSerializer(data) {\n  return stringify(data, null, null, function (k, v) {\n    if (process.env.NODE_ENV !== 'production') return null;\n    throw new Error('\\n      redux-persist: cannot process cyclical state.\\n      Consider changing your state structure to have no cycles.\\n      Alternatively blacklist the corresponding reducer key.\\n      Cycle encounted at key \"' + k + '\" with value \"' + v + '\".\\n    ');\n  });\n}\n\nfunction defaultDeserializer(serial) {\n  return JSON.parse(serial);\n}\n\nfunction rehydrateAction(data) {\n  return {\n    type: REHYDRATE,\n    payload: data\n  };\n}\n\nfunction defaultStateIterator(collection, callback) {\n  return Object.keys(collection).forEach(function (key) {\n    return callback(collection[key], key);\n  });\n}\n\nfunction defaultStateGetter(state, key) {\n  return state[key];\n}\n\nfunction defaultStateSetter(state, key, value) {\n  state[key] = value;\n  return state;\n}"]},"metadata":{},"sourceType":"module"}